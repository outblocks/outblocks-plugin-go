// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HostServiceClient is the client API for HostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostServiceClient interface {
	PromptConfirmation(ctx context.Context, in *PromptConfirmationRequest, opts ...grpc.CallOption) (*PromptConfirmationResponse, error)
	PromptInput(ctx context.Context, in *PromptInputRequest, opts ...grpc.CallOption) (*PromptInputResponse, error)
	PromptSelect(ctx context.Context, in *PromptSelectRequest, opts ...grpc.CallOption) (*PromptSelectResponse, error)
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	HostGetSecret(ctx context.Context, in *HostGetSecretRequest, opts ...grpc.CallOption) (*HostGetSecretResponse, error)
}

type hostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostServiceClient(cc grpc.ClientConnInterface) HostServiceClient {
	return &hostServiceClient{cc}
}

func (c *hostServiceClient) PromptConfirmation(ctx context.Context, in *PromptConfirmationRequest, opts ...grpc.CallOption) (*PromptConfirmationResponse, error) {
	out := new(PromptConfirmationResponse)
	err := c.cc.Invoke(ctx, "/api.v1.HostService/PromptConfirmation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) PromptInput(ctx context.Context, in *PromptInputRequest, opts ...grpc.CallOption) (*PromptInputResponse, error) {
	out := new(PromptInputResponse)
	err := c.cc.Invoke(ctx, "/api.v1.HostService/PromptInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) PromptSelect(ctx context.Context, in *PromptSelectRequest, opts ...grpc.CallOption) (*PromptSelectResponse, error) {
	out := new(PromptSelectResponse)
	err := c.cc.Invoke(ctx, "/api.v1.HostService/PromptSelect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/api.v1.HostService/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) HostGetSecret(ctx context.Context, in *HostGetSecretRequest, opts ...grpc.CallOption) (*HostGetSecretResponse, error) {
	out := new(HostGetSecretResponse)
	err := c.cc.Invoke(ctx, "/api.v1.HostService/HostGetSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostServiceServer is the server API for HostService service.
// All implementations should embed UnimplementedHostServiceServer
// for forward compatibility
type HostServiceServer interface {
	PromptConfirmation(context.Context, *PromptConfirmationRequest) (*PromptConfirmationResponse, error)
	PromptInput(context.Context, *PromptInputRequest) (*PromptInputResponse, error)
	PromptSelect(context.Context, *PromptSelectRequest) (*PromptSelectResponse, error)
	Log(context.Context, *LogRequest) (*LogResponse, error)
	HostGetSecret(context.Context, *HostGetSecretRequest) (*HostGetSecretResponse, error)
}

// UnimplementedHostServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHostServiceServer struct {
}

func (UnimplementedHostServiceServer) PromptConfirmation(context.Context, *PromptConfirmationRequest) (*PromptConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromptConfirmation not implemented")
}
func (UnimplementedHostServiceServer) PromptInput(context.Context, *PromptInputRequest) (*PromptInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromptInput not implemented")
}
func (UnimplementedHostServiceServer) PromptSelect(context.Context, *PromptSelectRequest) (*PromptSelectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromptSelect not implemented")
}
func (UnimplementedHostServiceServer) Log(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedHostServiceServer) HostGetSecret(context.Context, *HostGetSecretRequest) (*HostGetSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostGetSecret not implemented")
}

// UnsafeHostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostServiceServer will
// result in compilation errors.
type UnsafeHostServiceServer interface {
	mustEmbedUnimplementedHostServiceServer()
}

func RegisterHostServiceServer(s grpc.ServiceRegistrar, srv HostServiceServer) {
	s.RegisterService(&HostService_ServiceDesc, srv)
}

func _HostService_PromptConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptConfirmationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).PromptConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.HostService/PromptConfirmation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).PromptConfirmation(ctx, req.(*PromptConfirmationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_PromptInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).PromptInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.HostService/PromptInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).PromptInput(ctx, req.(*PromptInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_PromptSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptSelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).PromptSelect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.HostService/PromptSelect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).PromptSelect(ctx, req.(*PromptSelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.HostService/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_HostGetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostGetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).HostGetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.HostService/HostGetSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).HostGetSecret(ctx, req.(*HostGetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostService_ServiceDesc is the grpc.ServiceDesc for HostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.HostService",
	HandlerType: (*HostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PromptConfirmation",
			Handler:    _HostService_PromptConfirmation_Handler,
		},
		{
			MethodName: "PromptInput",
			Handler:    _HostService_PromptInput_Handler,
		},
		{
			MethodName: "PromptSelect",
			Handler:    _HostService_PromptSelect_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _HostService_Log_Handler,
		},
		{
			MethodName: "HostGetSecret",
			Handler:    _HostService_HostGetSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/host.proto",
}
