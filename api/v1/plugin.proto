syntax = "proto3";
package api.v1;
option go_package = "github.com/outblocks/outblocks-plugin-go/gen/api/v1;apiv1";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

// Basic plugin.

message InitRequest { string host_addr = 1; }

message InitResponse {}

message StartRequest { google.protobuf.Struct properties = 1; }

message StartResponse {}

message ProjectInitRequest {
  string name = 1;
  repeated string deploy_plugins = 2;
  repeated string run_plugins = 3;
  string dns_plugin = 5;
  google.protobuf.Struct args = 4;
}

message ProjectInitResponse { google.protobuf.Struct properties = 1; }

service BasicPluginService {
  rpc Init(InitRequest) returns (InitResponse);
  rpc Start(StartRequest) returns (StartResponse);
  rpc ProjectInit(ProjectInitRequest) returns (ProjectInitResponse);
}

// State plugin.

message GetStateRequest {
  string state_type = 1;
  google.protobuf.Struct properties = 2;
  bool lock = 3;
  google.protobuf.Duration lock_wait = 4;
  google.protobuf.Duration lock_ttl = 6;
  bool skip_create = 5;
}

message GetStateResponse {
  message State {
    bytes state = 1;
    string lock_info = 2;
    bool state_created = 3;
    string state_name = 4;
  }

  oneof response {
    bool waiting = 1;
    State state = 2;
  }
}

message SaveStateRequest {
  bytes state = 1;
  string state_type = 2;
  google.protobuf.Struct properties = 3;
}

message SaveStateResponse {}

message ReleaseStateLockRequest {
  string lock_info = 1;
  string state_type = 2;
  google.protobuf.Struct properties = 3;
}

message ReleaseStateLockResponse {}

service StatePluginService {
  rpc GetState(GetStateRequest) returns (stream GetStateResponse);
  rpc SaveState(SaveStateRequest) returns (SaveStateResponse);
  rpc ReleaseStateLock(ReleaseStateLockRequest)
      returns (ReleaseStateLockResponse);
}

// Locking plugin.
message AcquireLocksRequest {
  repeated string lock_names = 1;
  google.protobuf.Duration lock_wait = 2;
  google.protobuf.Duration lock_ttl = 4;
  google.protobuf.Struct properties = 3;
}

message AcquireLocksResponse {
  bool waiting = 1;
  map<string, string> locks = 2;
}

message ReleaseLocksRequest {
  map<string, string> locks = 1;
  google.protobuf.Struct properties = 2;
}

message ReleaseLocksResponse {}

service LockingPluginService {
  rpc AcquireLocks(AcquireLocksRequest) returns (stream AcquireLocksResponse);
  rpc ReleaseLocks(ReleaseLocksRequest) returns (ReleaseLocksResponse);
}

// Deploy plugin.

message AppDeployInfo {
  string plugin = 1;
  map<string, string> env = 2;
  google.protobuf.Struct properties = 3;
}

message AppNeed {
  string dependency = 1;
  google.protobuf.Struct properties = 2;
}

message App {
  string id = 1;
  string name = 2;
  string type = 3;
  string dir = 4;
  string url = 5;
  string path_redirect = 6;
  map<string, string> env = 7;
  string deploy_plugin = 8;
  string run_plugin = 10;
  AppDeployInfo deploy = 12;
  map<string, AppNeed> needs = 13;
  google.protobuf.Struct properties = 14;
}

message DNSState {
  enum SSLStatus {
    SSL_STATUS_UNSPECIFIED = 0;
    SSL_STATUS_OK = 1;
    SSL_STATUS_PROVISIONING = 2;
    SSL_STATUS_PROVISIONING_FAILED = 3;
    SSL_STATUS_RENEWAL_FAILED = 4;
  }
  string internal_ip = 1;
  string ip = 2;
  string cname = 3;
  string internal_url = 4;
  string url = 5;
  string cloud_url = 11;
  SSLStatus ssl_status = 7;
  string ssl_status_info = 8;
  string connection_info = 9;
  google.protobuf.Struct properties = 10;
}

message DeploymentState {
  bool ready = 1;
  string message = 2;
}

message AppState {
  App app = 1;
  DeploymentState deployment = 2;
  DNSState dns = 3;
}

message AppBuild {
  // Docker based deployments.
  string local_docker_image = 1;
  string local_docker_hash = 2;

  // Archive based deployments.
  string local_archive_path = 3;
  string local_archive_hash = 4;

}

message AppPlan {
  AppState state = 1;
  AppBuild build = 3;
  bool skip = 2;
}

message Dependency {
  string id = 1;
  string deploy_plugin = 2;
  string name = 3;
  string type = 4;
  google.protobuf.Struct properties = 5;
}

message DependencyState {
  Dependency dependency = 1;
  DNSState dns = 2;
}

message DependencyPlan {
  DependencyState state = 1;
  bool skip = 2;
}

message PluginState {
  bytes registry = 1;
  map<string, bytes> other = 2;
}

message PlanRequest {
  repeated AppPlan apps = 1;
  repeated DependencyPlan dependencies = 2;
  repeated DomainInfo domains = 3;

  bool destroy = 4;
  bool verify = 5;
  PluginState state = 6;
  int32 priority = 8;
  google.protobuf.Struct args = 7;
}

enum PlanType {
  PLAN_TYPE_UNSPECIFIED = 0;
  PLAN_TYPE_CREATE = 1;
  PLAN_TYPE_RECREATE = 2;
  PLAN_TYPE_UPDATE = 3;
  PLAN_TYPE_DELETE = 4;
  PLAN_TYPE_PROCESS = 5;
}

message PlanAction {
  PlanType type = 1;
  string source = 2;
  string namespace = 3;
  string object_id = 4;
  string object_type = 5;
  string object_name = 6;
  repeated string fields = 8;
  bool critical = 7;
}

message Plan { repeated PlanAction actions = 1; }

message PlanResponse {
  Plan plan = 1;

  repeated DomainInfo domains = 2;
  PluginState state = 3;
  map<string, AppState> app_states = 4;
  map<string, DependencyState> dependency_states = 5;
  repeated DNSRecord dns_records = 6;
}

message ApplyRequest {
  repeated AppPlan apps = 1;
  repeated DependencyPlan dependencies = 2;
  repeated DomainInfo domains = 3;

  bool destroy = 4;
  PluginState state = 5;
  int32 priority = 7;
  google.protobuf.Struct args = 6;
}

message ApplyAction {
  string source = 1;
  PlanType type = 2;
  string namespace = 3;
  string object_id = 4;
  string object_type = 5;
  string object_name = 6;
  int32 progress = 7;
  int32 total = 8;
}

message ApplyActionResponse { repeated ApplyAction actions = 1; }

message ApplyDoneResponse {
  PluginState state = 1;
  repeated DomainInfo domains = 5;
  map<string, AppState> app_states = 2;
  map<string, DependencyState> dependency_states = 3;
  repeated DNSRecord dns_records = 4;
}

message ApplyResponse {
  oneof response {
    ApplyActionResponse action = 1;
    ApplyDoneResponse done = 2;
  }
}

service DeployPluginService {
  rpc Plan(PlanRequest) returns (PlanResponse);
  rpc Apply(ApplyRequest) returns (stream ApplyResponse);
}

// Logs plugin.

enum LogSeverity {
  LOG_SEVERITY_UNSPECIFIED = 0;
  LOG_SEVERITY_DEBUG = 100;
  LOG_SEVERITY_NOTICE = 200;
  LOG_SEVERITY_INFO = 300;
  LOG_SEVERITY_WARN = 400;
  LOG_SEVERITY_ERROR = 500;
}

message LogsRequest {
  repeated App apps = 1;
  repeated Dependency dependencies = 2;
  PluginState state = 3;

  google.protobuf.Timestamp start = 4;
  google.protobuf.Timestamp end = 5;
  LogSeverity severity = 6;
  repeated string contains = 7;
  repeated string not_contains = 8;
  string filter = 9;
  bool follow = 10;
}

message LogsResponse {
  message Http {
    string request_method = 1;
    string request_url = 2;
    int64 request_size = 3;
    int32 status = 4;
    int64 response_size = 5;
    string remote_ip = 6;
    string server_ip = 7;
    string user_agent = 8;
    string referer = 9;
    google.protobuf.Duration latency = 10;
    string protocol = 11;
  }

  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_STDOUT = 1;
    TYPE_STDERR = 2;
  }

  string source = 1;
  Type type = 2;
  google.protobuf.Timestamp time = 3;
  LogSeverity severity = 4;
  Http http = 5;

  oneof payload {
    string text = 6;
    google.protobuf.Struct json = 7;
  }
}

service LogsPluginService {
  rpc Logs(LogsRequest) returns (stream LogsResponse);
}

// DNS plugin.

message DomainInfo {
  repeated string domains = 1;
  string cert = 2;
  string key = 3;
  string dns_plugin = 4;
  google.protobuf.Struct properties = 5;
}

message DNSRecord {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_A = 1;
    TYPE_AAAA = 2;
    TYPE_CNAME = 3;
  }

  string record = 1;
  string value = 2;
  Type type = 3;
  bool created = 4;
}

message ApplyDNSDoneResponse {
  PluginState state = 1;
  repeated DomainInfo domains = 2;
  repeated DNSRecord dns_records = 3;
}

message PlanDNSRequest {
  repeated DNSRecord dns_records = 1;
  repeated DomainInfo domains = 2;

  bool destroy = 3;
  bool verify = 4;
  PluginState state = 5;
  google.protobuf.Struct args = 6;
}

message PlanDNSResponse {
  Plan plan = 1;

  PluginState state = 2;
  repeated DomainInfo domains = 3;
  repeated DNSRecord dns_records = 4;
}

message ApplyDNSRequest {
  repeated DNSRecord dns_records = 1;
  repeated DomainInfo domains = 2;

  bool destroy = 3;
  PluginState state = 4;
  google.protobuf.Struct args = 5;
}

message ApplyDNSResponse {
  oneof response {
    ApplyActionResponse action = 1;
    ApplyDNSDoneResponse done = 2;
  }
}

service DNSPluginService {
  rpc PlanDNS(PlanDNSRequest) returns (PlanDNSResponse);
  rpc ApplyDNS(ApplyDNSRequest) returns (stream ApplyDNSResponse);
}

// Run plugin.

message AppRun {
  App app = 1;
  string url = 2;
  string ip = 3;
  int32 port = 4;
  repeated string command = 5;
  map<string, string> env = 6;
  google.protobuf.Struct properties = 7;
}

message DependencyRun {
  Dependency dependency = 1;
  string ip = 2;
  int32 port = 3;
}

message RunRequest {
  repeated AppRun apps = 1;
  repeated DependencyRun dependencies = 2;
  map<string, string> hosts = 3;
  google.protobuf.Struct args = 4;
}

message RunVars { map<string, string> vars = 1; }

message RunStartResponse { map<string, RunVars> vars = 1; }

message RunOutputResponse {
  enum Source {
    SOURCE_UNSPECIFIED = 0;
    SOURCE_APP = 1;
    SOURCE_DEPENDENCY = 2;
  }
  enum Stream {
    STREAM_UNSPECIFIED = 0;
    STREAM_STDOUT = 1;
    STREAM_STDERR = 2;
  }

  Source source = 1;
  string id = 2;
  string name = 3;
  Stream stream = 4;
  string message = 5;
}

message RunResponse {
  oneof response {
    RunStartResponse start = 1;
    RunOutputResponse output = 2;
  }
}

service RunPluginService { rpc Run(RunRequest) returns (stream RunResponse); }

// Command plugin.

message CommandArgs {
  repeated string positional = 1;
  google.protobuf.Struct flags = 2;
}

message CommandRequest {
  string command = 1;
  CommandArgs args = 2;

  // Possible input.
  map<string, AppState> app_states = 3;
  map<string, DependencyState> dependency_states = 4;
  PluginState plugin_state = 5;
}

message CommandResponse {}

service CommandPluginService {
  rpc Command(CommandRequest) returns (CommandResponse);
}


// Deploy hooks.

message DeployHookRequest {
  enum Stage {
    STAGE_UNSPECIFIED = 0;
    STAGE_PRE_PLAN = 1;
    STAGE_PRE_APPLY = 2;
    STAGE_POST_APPLY = 3;
    STAGE_POST_DEPLOY = 4;
  }

  Stage stage = 1;
  repeated AppPlan apps = 2;
  repeated DependencyPlan dependencies = 3;
  repeated DomainInfo domains = 4;

  bool destroy = 5;
  bool verify = 6;
  PluginState state = 7;
  google.protobuf.Struct args = 8;
}

message DeployHookResponse {
  PluginState state = 1;
  repeated DomainInfo domains = 2;
  map<string, AppState> app_states = 3;
  map<string, DependencyState> dependency_states = 4;
  repeated DNSRecord dns_records = 5;
}

service DeployHookService {
  rpc DeployHook(DeployHookRequest) returns (DeployHookResponse);
}

// Secret plugin.

message GetSecretRequest {
  string key = 1;

  string secrets_type = 2;
  google.protobuf.Struct properties = 3;
}

message GetSecretResponse {
  string value = 3;
  bool specified = 4;
}

message SetSecretRequest {
  string key = 1;
  string value = 2;

  string secrets_type = 3;
  google.protobuf.Struct properties = 4;
}

message SetSecretResponse {
  bool changed = 1;
}

message DeleteSecretRequest {
  string key = 1;

  string secrets_type = 2;
  google.protobuf.Struct properties = 3;
}

message DeleteSecretResponse {
  bool deleted = 1;
}

message GetSecretsRequest {
  string secrets_type = 1;
  google.protobuf.Struct properties = 2;
}

message GetSecretsResponse {
  map<string, string> values = 1;
}

message ReplaceSecretsRequest {
  map<string, string> values = 1;

  string secrets_type = 2;
  google.protobuf.Struct properties = 3;
}

message ReplaceSecretsResponse {}

message DeleteSecretsRequest {
  string secrets_type = 1;
  google.protobuf.Struct properties = 2;
}

message DeleteSecretsResponse {}

service SecretPluginService {
  rpc GetSecret(GetSecretRequest) returns (GetSecretResponse);
  rpc SetSecret(SetSecretRequest) returns (SetSecretResponse);
  rpc DeleteSecret(DeleteSecretRequest) returns (DeleteSecretResponse);

  rpc GetSecrets(GetSecretsRequest) returns (GetSecretsResponse);
  rpc ReplaceSecrets(ReplaceSecretsRequest) returns (ReplaceSecretsResponse);
  rpc DeleteSecrets(DeleteSecretsRequest) returns (DeleteSecretsResponse);
}

// Monitoring plugin.

message MonitoringTarget {
  string url = 1;
  int32 frequency = 2;
  repeated string locations = 3;
}

message MonitoringChannel {
  string type = 1;
  google.protobuf.Struct properties = 2;
}

message MonitoringData {
  repeated MonitoringTarget targets = 1;
  repeated MonitoringChannel channels = 2;

  string plugin = 3;
  bool use_existing_channels = 4;
}

message PlanMonitoringRequest {
  MonitoringData data = 1;

  bool destroy = 2;
  bool verify = 3;
  PluginState state = 4;
  google.protobuf.Struct args = 5;
}

message PlanMonitoringResponse {
  Plan plan = 1;

  PluginState state = 2;
}

message ApplyMonitoringRequest {
  MonitoringData data = 1;

  bool destroy = 2;
  PluginState state = 3;
  google.protobuf.Struct args = 4;
}

message ApplyMonitoringDoneResponse {
  PluginState state = 1;
}

message ApplyMonitoringResponse {
  oneof response {
    ApplyActionResponse action = 1;
    ApplyMonitoringDoneResponse done = 2;
  }
}

service MonitoringPluginService {
  rpc PlanMonitoring(PlanMonitoringRequest) returns (PlanMonitoringResponse);
  rpc ApplyMonitoring(ApplyMonitoringRequest) returns (stream ApplyMonitoringResponse);
}
