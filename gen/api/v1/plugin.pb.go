// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        (unknown)
// source: api/v1/plugin.proto

package apiv1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PlanType int32

const (
	PlanType_PLAN_TYPE_UNSPECIFIED PlanType = 0
	PlanType_PLAN_TYPE_CREATE      PlanType = 1
	PlanType_PLAN_TYPE_RECREATE    PlanType = 2
	PlanType_PLAN_TYPE_UPDATE      PlanType = 3
	PlanType_PLAN_TYPE_DELETE      PlanType = 4
	PlanType_PLAN_TYPE_PROCESS     PlanType = 5
)

// Enum value maps for PlanType.
var (
	PlanType_name = map[int32]string{
		0: "PLAN_TYPE_UNSPECIFIED",
		1: "PLAN_TYPE_CREATE",
		2: "PLAN_TYPE_RECREATE",
		3: "PLAN_TYPE_UPDATE",
		4: "PLAN_TYPE_DELETE",
		5: "PLAN_TYPE_PROCESS",
	}
	PlanType_value = map[string]int32{
		"PLAN_TYPE_UNSPECIFIED": 0,
		"PLAN_TYPE_CREATE":      1,
		"PLAN_TYPE_RECREATE":    2,
		"PLAN_TYPE_UPDATE":      3,
		"PLAN_TYPE_DELETE":      4,
		"PLAN_TYPE_PROCESS":     5,
	}
)

func (x PlanType) Enum() *PlanType {
	p := new(PlanType)
	*p = x
	return p
}

func (x PlanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_plugin_proto_enumTypes[0].Descriptor()
}

func (PlanType) Type() protoreflect.EnumType {
	return &file_api_v1_plugin_proto_enumTypes[0]
}

func (x PlanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanType.Descriptor instead.
func (PlanType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{0}
}

type LogSeverity int32

const (
	LogSeverity_LOG_SEVERITY_UNSPECIFIED LogSeverity = 0
	LogSeverity_LOG_SEVERITY_DEBUG       LogSeverity = 100
	LogSeverity_LOG_SEVERITY_NOTICE      LogSeverity = 200
	LogSeverity_LOG_SEVERITY_INFO        LogSeverity = 300
	LogSeverity_LOG_SEVERITY_WARN        LogSeverity = 400
	LogSeverity_LOG_SEVERITY_ERROR       LogSeverity = 500
)

// Enum value maps for LogSeverity.
var (
	LogSeverity_name = map[int32]string{
		0:   "LOG_SEVERITY_UNSPECIFIED",
		100: "LOG_SEVERITY_DEBUG",
		200: "LOG_SEVERITY_NOTICE",
		300: "LOG_SEVERITY_INFO",
		400: "LOG_SEVERITY_WARN",
		500: "LOG_SEVERITY_ERROR",
	}
	LogSeverity_value = map[string]int32{
		"LOG_SEVERITY_UNSPECIFIED": 0,
		"LOG_SEVERITY_DEBUG":       100,
		"LOG_SEVERITY_NOTICE":      200,
		"LOG_SEVERITY_INFO":        300,
		"LOG_SEVERITY_WARN":        400,
		"LOG_SEVERITY_ERROR":       500,
	}
)

func (x LogSeverity) Enum() *LogSeverity {
	p := new(LogSeverity)
	*p = x
	return p
}

func (x LogSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_plugin_proto_enumTypes[1].Descriptor()
}

func (LogSeverity) Type() protoreflect.EnumType {
	return &file_api_v1_plugin_proto_enumTypes[1]
}

func (x LogSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogSeverity.Descriptor instead.
func (LogSeverity) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{1}
}

type DNSState_SSLStatus int32

const (
	DNSState_SSL_STATUS_UNSPECIFIED         DNSState_SSLStatus = 0
	DNSState_SSL_STATUS_OK                  DNSState_SSLStatus = 1
	DNSState_SSL_STATUS_PROVISIONING        DNSState_SSLStatus = 2
	DNSState_SSL_STATUS_PROVISIONING_FAILED DNSState_SSLStatus = 3
	DNSState_SSL_STATUS_RENEWAL_FAILED      DNSState_SSLStatus = 4
)

// Enum value maps for DNSState_SSLStatus.
var (
	DNSState_SSLStatus_name = map[int32]string{
		0: "SSL_STATUS_UNSPECIFIED",
		1: "SSL_STATUS_OK",
		2: "SSL_STATUS_PROVISIONING",
		3: "SSL_STATUS_PROVISIONING_FAILED",
		4: "SSL_STATUS_RENEWAL_FAILED",
	}
	DNSState_SSLStatus_value = map[string]int32{
		"SSL_STATUS_UNSPECIFIED":         0,
		"SSL_STATUS_OK":                  1,
		"SSL_STATUS_PROVISIONING":        2,
		"SSL_STATUS_PROVISIONING_FAILED": 3,
		"SSL_STATUS_RENEWAL_FAILED":      4,
	}
)

func (x DNSState_SSLStatus) Enum() *DNSState_SSLStatus {
	p := new(DNSState_SSLStatus)
	*p = x
	return p
}

func (x DNSState_SSLStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNSState_SSLStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_plugin_proto_enumTypes[2].Descriptor()
}

func (DNSState_SSLStatus) Type() protoreflect.EnumType {
	return &file_api_v1_plugin_proto_enumTypes[2]
}

func (x DNSState_SSLStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNSState_SSLStatus.Descriptor instead.
func (DNSState_SSLStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{19, 0}
}

type LogsResponse_Type int32

const (
	LogsResponse_TYPE_UNSPECIFIED LogsResponse_Type = 0
	LogsResponse_TYPE_STDOUT      LogsResponse_Type = 1
	LogsResponse_TYPE_STDERR      LogsResponse_Type = 2
)

// Enum value maps for LogsResponse_Type.
var (
	LogsResponse_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_STDOUT",
		2: "TYPE_STDERR",
	}
	LogsResponse_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_STDOUT":      1,
		"TYPE_STDERR":      2,
	}
)

func (x LogsResponse_Type) Enum() *LogsResponse_Type {
	p := new(LogsResponse_Type)
	*p = x
	return p
}

func (x LogsResponse_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogsResponse_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_plugin_proto_enumTypes[3].Descriptor()
}

func (LogsResponse_Type) Type() protoreflect.EnumType {
	return &file_api_v1_plugin_proto_enumTypes[3]
}

func (x LogsResponse_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogsResponse_Type.Descriptor instead.
func (LogsResponse_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{38, 0}
}

type DNSRecord_Type int32

const (
	DNSRecord_TYPE_UNSPECIFIED DNSRecord_Type = 0
	DNSRecord_TYPE_A           DNSRecord_Type = 1
	DNSRecord_TYPE_AAAA        DNSRecord_Type = 2
	DNSRecord_TYPE_CNAME       DNSRecord_Type = 3
)

// Enum value maps for DNSRecord_Type.
var (
	DNSRecord_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_A",
		2: "TYPE_AAAA",
		3: "TYPE_CNAME",
	}
	DNSRecord_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_A":           1,
		"TYPE_AAAA":        2,
		"TYPE_CNAME":       3,
	}
)

func (x DNSRecord_Type) Enum() *DNSRecord_Type {
	p := new(DNSRecord_Type)
	*p = x
	return p
}

func (x DNSRecord_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNSRecord_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_plugin_proto_enumTypes[4].Descriptor()
}

func (DNSRecord_Type) Type() protoreflect.EnumType {
	return &file_api_v1_plugin_proto_enumTypes[4]
}

func (x DNSRecord_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNSRecord_Type.Descriptor instead.
func (DNSRecord_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{40, 0}
}

type RunOutputResponse_Source int32

const (
	RunOutputResponse_SOURCE_UNSPECIFIED RunOutputResponse_Source = 0
	RunOutputResponse_SOURCE_APP         RunOutputResponse_Source = 1
	RunOutputResponse_SOURCE_DEPENDENCY  RunOutputResponse_Source = 2
)

// Enum value maps for RunOutputResponse_Source.
var (
	RunOutputResponse_Source_name = map[int32]string{
		0: "SOURCE_UNSPECIFIED",
		1: "SOURCE_APP",
		2: "SOURCE_DEPENDENCY",
	}
	RunOutputResponse_Source_value = map[string]int32{
		"SOURCE_UNSPECIFIED": 0,
		"SOURCE_APP":         1,
		"SOURCE_DEPENDENCY":  2,
	}
)

func (x RunOutputResponse_Source) Enum() *RunOutputResponse_Source {
	p := new(RunOutputResponse_Source)
	*p = x
	return p
}

func (x RunOutputResponse_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunOutputResponse_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_plugin_proto_enumTypes[5].Descriptor()
}

func (RunOutputResponse_Source) Type() protoreflect.EnumType {
	return &file_api_v1_plugin_proto_enumTypes[5]
}

func (x RunOutputResponse_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunOutputResponse_Source.Descriptor instead.
func (RunOutputResponse_Source) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{51, 0}
}

type RunOutputResponse_Stream int32

const (
	RunOutputResponse_STREAM_UNSPECIFIED RunOutputResponse_Stream = 0
	RunOutputResponse_STREAM_STDOUT      RunOutputResponse_Stream = 1
	RunOutputResponse_STREAM_STDERR      RunOutputResponse_Stream = 2
)

// Enum value maps for RunOutputResponse_Stream.
var (
	RunOutputResponse_Stream_name = map[int32]string{
		0: "STREAM_UNSPECIFIED",
		1: "STREAM_STDOUT",
		2: "STREAM_STDERR",
	}
	RunOutputResponse_Stream_value = map[string]int32{
		"STREAM_UNSPECIFIED": 0,
		"STREAM_STDOUT":      1,
		"STREAM_STDERR":      2,
	}
)

func (x RunOutputResponse_Stream) Enum() *RunOutputResponse_Stream {
	p := new(RunOutputResponse_Stream)
	*p = x
	return p
}

func (x RunOutputResponse_Stream) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunOutputResponse_Stream) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_plugin_proto_enumTypes[6].Descriptor()
}

func (RunOutputResponse_Stream) Type() protoreflect.EnumType {
	return &file_api_v1_plugin_proto_enumTypes[6]
}

func (x RunOutputResponse_Stream) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunOutputResponse_Stream.Descriptor instead.
func (RunOutputResponse_Stream) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{51, 1}
}

type DeployHookRequest_Stage int32

const (
	DeployHookRequest_STAGE_UNSPECIFIED DeployHookRequest_Stage = 0
	DeployHookRequest_STAGE_PRE_PLAN    DeployHookRequest_Stage = 1
	DeployHookRequest_STAGE_PRE_APPLY   DeployHookRequest_Stage = 2
	DeployHookRequest_STAGE_POST_APPLY  DeployHookRequest_Stage = 3
	DeployHookRequest_STAGE_POST_DEPLOY DeployHookRequest_Stage = 4
)

// Enum value maps for DeployHookRequest_Stage.
var (
	DeployHookRequest_Stage_name = map[int32]string{
		0: "STAGE_UNSPECIFIED",
		1: "STAGE_PRE_PLAN",
		2: "STAGE_PRE_APPLY",
		3: "STAGE_POST_APPLY",
		4: "STAGE_POST_DEPLOY",
	}
	DeployHookRequest_Stage_value = map[string]int32{
		"STAGE_UNSPECIFIED": 0,
		"STAGE_PRE_PLAN":    1,
		"STAGE_PRE_APPLY":   2,
		"STAGE_POST_APPLY":  3,
		"STAGE_POST_DEPLOY": 4,
	}
)

func (x DeployHookRequest_Stage) Enum() *DeployHookRequest_Stage {
	p := new(DeployHookRequest_Stage)
	*p = x
	return p
}

func (x DeployHookRequest_Stage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeployHookRequest_Stage) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_plugin_proto_enumTypes[7].Descriptor()
}

func (DeployHookRequest_Stage) Type() protoreflect.EnumType {
	return &file_api_v1_plugin_proto_enumTypes[7]
}

func (x DeployHookRequest_Stage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeployHookRequest_Stage.Descriptor instead.
func (DeployHookRequest_Stage) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{56, 0}
}

type InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostAddr string `protobuf:"bytes,1,opt,name=host_addr,json=hostAddr,proto3" json:"host_addr,omitempty"`
}

func (x *InitRequest) Reset() {
	*x = InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitRequest) ProtoMessage() {}

func (x *InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitRequest.ProtoReflect.Descriptor instead.
func (*InitRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{0}
}

func (x *InitRequest) GetHostAddr() string {
	if x != nil {
		return x.HostAddr
	}
	return ""
}

type InitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitResponse) Reset() {
	*x = InitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitResponse) ProtoMessage() {}

func (x *InitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitResponse.ProtoReflect.Descriptor instead.
func (*InitResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{1}
}

type StartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties *structpb.Struct `protobuf:"bytes,1,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *StartRequest) Reset() {
	*x = StartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRequest) ProtoMessage() {}

func (x *StartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRequest.ProtoReflect.Descriptor instead.
func (*StartRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{2}
}

func (x *StartRequest) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type StartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartResponse) Reset() {
	*x = StartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartResponse) ProtoMessage() {}

func (x *StartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartResponse.ProtoReflect.Descriptor instead.
func (*StartResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{3}
}

type ProjectInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DeployPlugins []string         `protobuf:"bytes,2,rep,name=deploy_plugins,json=deployPlugins,proto3" json:"deploy_plugins,omitempty"`
	RunPlugins    []string         `protobuf:"bytes,3,rep,name=run_plugins,json=runPlugins,proto3" json:"run_plugins,omitempty"`
	Args          *structpb.Struct `protobuf:"bytes,4,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *ProjectInitRequest) Reset() {
	*x = ProjectInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectInitRequest) ProtoMessage() {}

func (x *ProjectInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectInitRequest.ProtoReflect.Descriptor instead.
func (*ProjectInitRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{4}
}

func (x *ProjectInitRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectInitRequest) GetDeployPlugins() []string {
	if x != nil {
		return x.DeployPlugins
	}
	return nil
}

func (x *ProjectInitRequest) GetRunPlugins() []string {
	if x != nil {
		return x.RunPlugins
	}
	return nil
}

func (x *ProjectInitRequest) GetArgs() *structpb.Struct {
	if x != nil {
		return x.Args
	}
	return nil
}

type ProjectInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties *structpb.Struct `protobuf:"bytes,1,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *ProjectInitResponse) Reset() {
	*x = ProjectInitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectInitResponse) ProtoMessage() {}

func (x *ProjectInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectInitResponse.ProtoReflect.Descriptor instead.
func (*ProjectInitResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{5}
}

func (x *ProjectInitResponse) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type GetStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateType  string               `protobuf:"bytes,1,opt,name=state_type,json=stateType,proto3" json:"state_type,omitempty"`
	Properties *structpb.Struct     `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	Lock       bool                 `protobuf:"varint,3,opt,name=lock,proto3" json:"lock,omitempty"`
	LockWait   *durationpb.Duration `protobuf:"bytes,4,opt,name=lock_wait,json=lockWait,proto3" json:"lock_wait,omitempty"`
	LockTtl    *durationpb.Duration `protobuf:"bytes,6,opt,name=lock_ttl,json=lockTtl,proto3" json:"lock_ttl,omitempty"`
	SkipCreate bool                 `protobuf:"varint,5,opt,name=skip_create,json=skipCreate,proto3" json:"skip_create,omitempty"`
}

func (x *GetStateRequest) Reset() {
	*x = GetStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateRequest) ProtoMessage() {}

func (x *GetStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateRequest.ProtoReflect.Descriptor instead.
func (*GetStateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{6}
}

func (x *GetStateRequest) GetStateType() string {
	if x != nil {
		return x.StateType
	}
	return ""
}

func (x *GetStateRequest) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *GetStateRequest) GetLock() bool {
	if x != nil {
		return x.Lock
	}
	return false
}

func (x *GetStateRequest) GetLockWait() *durationpb.Duration {
	if x != nil {
		return x.LockWait
	}
	return nil
}

func (x *GetStateRequest) GetLockTtl() *durationpb.Duration {
	if x != nil {
		return x.LockTtl
	}
	return nil
}

func (x *GetStateRequest) GetSkipCreate() bool {
	if x != nil {
		return x.SkipCreate
	}
	return false
}

type GetStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*GetStateResponse_Waiting
	//	*GetStateResponse_State_
	Response isGetStateResponse_Response `protobuf_oneof:"response"`
}

func (x *GetStateResponse) Reset() {
	*x = GetStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateResponse) ProtoMessage() {}

func (x *GetStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateResponse.ProtoReflect.Descriptor instead.
func (*GetStateResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{7}
}

func (m *GetStateResponse) GetResponse() isGetStateResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetStateResponse) GetWaiting() bool {
	if x, ok := x.GetResponse().(*GetStateResponse_Waiting); ok {
		return x.Waiting
	}
	return false
}

func (x *GetStateResponse) GetState() *GetStateResponse_State {
	if x, ok := x.GetResponse().(*GetStateResponse_State_); ok {
		return x.State
	}
	return nil
}

type isGetStateResponse_Response interface {
	isGetStateResponse_Response()
}

type GetStateResponse_Waiting struct {
	Waiting bool `protobuf:"varint,1,opt,name=waiting,proto3,oneof"`
}

type GetStateResponse_State_ struct {
	State *GetStateResponse_State `protobuf:"bytes,2,opt,name=state,proto3,oneof"`
}

func (*GetStateResponse_Waiting) isGetStateResponse_Response() {}

func (*GetStateResponse_State_) isGetStateResponse_Response() {}

type SaveStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      []byte           `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	StateType  string           `protobuf:"bytes,2,opt,name=state_type,json=stateType,proto3" json:"state_type,omitempty"`
	Properties *structpb.Struct `protobuf:"bytes,3,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *SaveStateRequest) Reset() {
	*x = SaveStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveStateRequest) ProtoMessage() {}

func (x *SaveStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveStateRequest.ProtoReflect.Descriptor instead.
func (*SaveStateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{8}
}

func (x *SaveStateRequest) GetState() []byte {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *SaveStateRequest) GetStateType() string {
	if x != nil {
		return x.StateType
	}
	return ""
}

func (x *SaveStateRequest) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type SaveStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveStateResponse) Reset() {
	*x = SaveStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveStateResponse) ProtoMessage() {}

func (x *SaveStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveStateResponse.ProtoReflect.Descriptor instead.
func (*SaveStateResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{9}
}

type ReleaseStateLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockInfo   string           `protobuf:"bytes,1,opt,name=lock_info,json=lockInfo,proto3" json:"lock_info,omitempty"`
	StateType  string           `protobuf:"bytes,2,opt,name=state_type,json=stateType,proto3" json:"state_type,omitempty"`
	Properties *structpb.Struct `protobuf:"bytes,3,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *ReleaseStateLockRequest) Reset() {
	*x = ReleaseStateLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseStateLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseStateLockRequest) ProtoMessage() {}

func (x *ReleaseStateLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseStateLockRequest.ProtoReflect.Descriptor instead.
func (*ReleaseStateLockRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{10}
}

func (x *ReleaseStateLockRequest) GetLockInfo() string {
	if x != nil {
		return x.LockInfo
	}
	return ""
}

func (x *ReleaseStateLockRequest) GetStateType() string {
	if x != nil {
		return x.StateType
	}
	return ""
}

func (x *ReleaseStateLockRequest) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type ReleaseStateLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReleaseStateLockResponse) Reset() {
	*x = ReleaseStateLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseStateLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseStateLockResponse) ProtoMessage() {}

func (x *ReleaseStateLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseStateLockResponse.ProtoReflect.Descriptor instead.
func (*ReleaseStateLockResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{11}
}

// Locking plugin.
type AcquireLocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockNames  []string             `protobuf:"bytes,1,rep,name=lock_names,json=lockNames,proto3" json:"lock_names,omitempty"`
	LockWait   *durationpb.Duration `protobuf:"bytes,2,opt,name=lock_wait,json=lockWait,proto3" json:"lock_wait,omitempty"`
	LockTtl    *durationpb.Duration `protobuf:"bytes,4,opt,name=lock_ttl,json=lockTtl,proto3" json:"lock_ttl,omitempty"`
	Properties *structpb.Struct     `protobuf:"bytes,3,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *AcquireLocksRequest) Reset() {
	*x = AcquireLocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireLocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireLocksRequest) ProtoMessage() {}

func (x *AcquireLocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireLocksRequest.ProtoReflect.Descriptor instead.
func (*AcquireLocksRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{12}
}

func (x *AcquireLocksRequest) GetLockNames() []string {
	if x != nil {
		return x.LockNames
	}
	return nil
}

func (x *AcquireLocksRequest) GetLockWait() *durationpb.Duration {
	if x != nil {
		return x.LockWait
	}
	return nil
}

func (x *AcquireLocksRequest) GetLockTtl() *durationpb.Duration {
	if x != nil {
		return x.LockTtl
	}
	return nil
}

func (x *AcquireLocksRequest) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type AcquireLocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Waiting bool              `protobuf:"varint,1,opt,name=waiting,proto3" json:"waiting,omitempty"`
	Locks   map[string]string `protobuf:"bytes,2,rep,name=locks,proto3" json:"locks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AcquireLocksResponse) Reset() {
	*x = AcquireLocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireLocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireLocksResponse) ProtoMessage() {}

func (x *AcquireLocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireLocksResponse.ProtoReflect.Descriptor instead.
func (*AcquireLocksResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{13}
}

func (x *AcquireLocksResponse) GetWaiting() bool {
	if x != nil {
		return x.Waiting
	}
	return false
}

func (x *AcquireLocksResponse) GetLocks() map[string]string {
	if x != nil {
		return x.Locks
	}
	return nil
}

type ReleaseLocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locks      map[string]string `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Properties *structpb.Struct  `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *ReleaseLocksRequest) Reset() {
	*x = ReleaseLocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseLocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseLocksRequest) ProtoMessage() {}

func (x *ReleaseLocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseLocksRequest.ProtoReflect.Descriptor instead.
func (*ReleaseLocksRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{14}
}

func (x *ReleaseLocksRequest) GetLocks() map[string]string {
	if x != nil {
		return x.Locks
	}
	return nil
}

func (x *ReleaseLocksRequest) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type ReleaseLocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReleaseLocksResponse) Reset() {
	*x = ReleaseLocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseLocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseLocksResponse) ProtoMessage() {}

func (x *ReleaseLocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseLocksResponse.ProtoReflect.Descriptor instead.
func (*ReleaseLocksResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{15}
}

type AppDeployInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plugin string            `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`
	Env    map[string]string `protobuf:"bytes,2,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Other  *structpb.Struct  `protobuf:"bytes,3,opt,name=other,proto3" json:"other,omitempty"`
}

func (x *AppDeployInfo) Reset() {
	*x = AppDeployInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppDeployInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppDeployInfo) ProtoMessage() {}

func (x *AppDeployInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppDeployInfo.ProtoReflect.Descriptor instead.
func (*AppDeployInfo) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{16}
}

func (x *AppDeployInfo) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *AppDeployInfo) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *AppDeployInfo) GetOther() *structpb.Struct {
	if x != nil {
		return x.Other
	}
	return nil
}

type AppNeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dependency string           `protobuf:"bytes,1,opt,name=dependency,proto3" json:"dependency,omitempty"`
	Properties *structpb.Struct `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *AppNeed) Reset() {
	*x = AppNeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppNeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppNeed) ProtoMessage() {}

func (x *AppNeed) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppNeed.ProtoReflect.Descriptor instead.
func (*AppNeed) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{17}
}

func (x *AppNeed) GetDependency() string {
	if x != nil {
		return x.Dependency
	}
	return ""
}

func (x *AppNeed) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type         string              `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Dir          string              `protobuf:"bytes,4,opt,name=dir,proto3" json:"dir,omitempty"`
	Url          string              `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	PathRedirect string              `protobuf:"bytes,6,opt,name=path_redirect,json=pathRedirect,proto3" json:"path_redirect,omitempty"`
	Env          map[string]string   `protobuf:"bytes,7,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DeployPlugin string              `protobuf:"bytes,8,opt,name=deploy_plugin,json=deployPlugin,proto3" json:"deploy_plugin,omitempty"`
	RunPlugin    string              `protobuf:"bytes,10,opt,name=run_plugin,json=runPlugin,proto3" json:"run_plugin,omitempty"`
	Deploy       *AppDeployInfo      `protobuf:"bytes,12,opt,name=deploy,proto3" json:"deploy,omitempty"`
	Needs        map[string]*AppNeed `protobuf:"bytes,13,rep,name=needs,proto3" json:"needs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Properties   *structpb.Struct    `protobuf:"bytes,14,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *App) Reset() {
	*x = App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*App) ProtoMessage() {}

func (x *App) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use App.ProtoReflect.Descriptor instead.
func (*App) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{18}
}

func (x *App) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *App) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *App) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *App) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *App) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *App) GetPathRedirect() string {
	if x != nil {
		return x.PathRedirect
	}
	return ""
}

func (x *App) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *App) GetDeployPlugin() string {
	if x != nil {
		return x.DeployPlugin
	}
	return ""
}

func (x *App) GetRunPlugin() string {
	if x != nil {
		return x.RunPlugin
	}
	return ""
}

func (x *App) GetDeploy() *AppDeployInfo {
	if x != nil {
		return x.Deploy
	}
	return nil
}

func (x *App) GetNeeds() map[string]*AppNeed {
	if x != nil {
		return x.Needs
	}
	return nil
}

func (x *App) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type DNSState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalIp     string             `protobuf:"bytes,1,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	Ip             string             `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Cname          string             `protobuf:"bytes,3,opt,name=cname,proto3" json:"cname,omitempty"`
	InternalUrl    string             `protobuf:"bytes,4,opt,name=internal_url,json=internalUrl,proto3" json:"internal_url,omitempty"`
	Url            string             `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	CloudUrl       string             `protobuf:"bytes,11,opt,name=cloud_url,json=cloudUrl,proto3" json:"cloud_url,omitempty"`
	SslStatus      DNSState_SSLStatus `protobuf:"varint,7,opt,name=ssl_status,json=sslStatus,proto3,enum=api.v1.DNSState_SSLStatus" json:"ssl_status,omitempty"`
	SslStatusInfo  string             `protobuf:"bytes,8,opt,name=ssl_status_info,json=sslStatusInfo,proto3" json:"ssl_status_info,omitempty"`
	ConnectionInfo string             `protobuf:"bytes,9,opt,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"`
	Properties     *structpb.Struct   `protobuf:"bytes,10,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *DNSState) Reset() {
	*x = DNSState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSState) ProtoMessage() {}

func (x *DNSState) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSState.ProtoReflect.Descriptor instead.
func (*DNSState) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{19}
}

func (x *DNSState) GetInternalIp() string {
	if x != nil {
		return x.InternalIp
	}
	return ""
}

func (x *DNSState) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DNSState) GetCname() string {
	if x != nil {
		return x.Cname
	}
	return ""
}

func (x *DNSState) GetInternalUrl() string {
	if x != nil {
		return x.InternalUrl
	}
	return ""
}

func (x *DNSState) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DNSState) GetCloudUrl() string {
	if x != nil {
		return x.CloudUrl
	}
	return ""
}

func (x *DNSState) GetSslStatus() DNSState_SSLStatus {
	if x != nil {
		return x.SslStatus
	}
	return DNSState_SSL_STATUS_UNSPECIFIED
}

func (x *DNSState) GetSslStatusInfo() string {
	if x != nil {
		return x.SslStatusInfo
	}
	return ""
}

func (x *DNSState) GetConnectionInfo() string {
	if x != nil {
		return x.ConnectionInfo
	}
	return ""
}

func (x *DNSState) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type DeploymentState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ready   bool   `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeploymentState) Reset() {
	*x = DeploymentState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentState) ProtoMessage() {}

func (x *DeploymentState) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentState.ProtoReflect.Descriptor instead.
func (*DeploymentState) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{20}
}

func (x *DeploymentState) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *DeploymentState) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AppState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App        *App             `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Deployment *DeploymentState `protobuf:"bytes,2,opt,name=deployment,proto3" json:"deployment,omitempty"`
	Dns        *DNSState        `protobuf:"bytes,3,opt,name=dns,proto3" json:"dns,omitempty"`
}

func (x *AppState) Reset() {
	*x = AppState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppState) ProtoMessage() {}

func (x *AppState) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppState.ProtoReflect.Descriptor instead.
func (*AppState) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{21}
}

func (x *AppState) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *AppState) GetDeployment() *DeploymentState {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *AppState) GetDns() *DNSState {
	if x != nil {
		return x.Dns
	}
	return nil
}

type AppBuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalDockerImage string `protobuf:"bytes,1,opt,name=local_docker_image,json=localDockerImage,proto3" json:"local_docker_image,omitempty"`
	LocalDockerHash  string `protobuf:"bytes,2,opt,name=local_docker_hash,json=localDockerHash,proto3" json:"local_docker_hash,omitempty"`
}

func (x *AppBuild) Reset() {
	*x = AppBuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppBuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppBuild) ProtoMessage() {}

func (x *AppBuild) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppBuild.ProtoReflect.Descriptor instead.
func (*AppBuild) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{22}
}

func (x *AppBuild) GetLocalDockerImage() string {
	if x != nil {
		return x.LocalDockerImage
	}
	return ""
}

func (x *AppBuild) GetLocalDockerHash() string {
	if x != nil {
		return x.LocalDockerHash
	}
	return ""
}

type AppPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *AppState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Build *AppBuild `protobuf:"bytes,3,opt,name=build,proto3" json:"build,omitempty"`
	Skip  bool      `protobuf:"varint,2,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *AppPlan) Reset() {
	*x = AppPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppPlan) ProtoMessage() {}

func (x *AppPlan) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppPlan.ProtoReflect.Descriptor instead.
func (*AppPlan) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{23}
}

func (x *AppPlan) GetState() *AppState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *AppPlan) GetBuild() *AppBuild {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *AppPlan) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

type Dependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeployPlugin string           `protobuf:"bytes,2,opt,name=deploy_plugin,json=deployPlugin,proto3" json:"deploy_plugin,omitempty"`
	Name         string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type         string           `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Properties   *structpb.Struct `protobuf:"bytes,5,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *Dependency) Reset() {
	*x = Dependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dependency) ProtoMessage() {}

func (x *Dependency) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dependency.ProtoReflect.Descriptor instead.
func (*Dependency) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{24}
}

func (x *Dependency) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Dependency) GetDeployPlugin() string {
	if x != nil {
		return x.DeployPlugin
	}
	return ""
}

func (x *Dependency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dependency) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Dependency) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type DependencyState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dependency *Dependency `protobuf:"bytes,1,opt,name=dependency,proto3" json:"dependency,omitempty"`
	Dns        *DNSState   `protobuf:"bytes,2,opt,name=dns,proto3" json:"dns,omitempty"`
}

func (x *DependencyState) Reset() {
	*x = DependencyState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyState) ProtoMessage() {}

func (x *DependencyState) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyState.ProtoReflect.Descriptor instead.
func (*DependencyState) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{25}
}

func (x *DependencyState) GetDependency() *Dependency {
	if x != nil {
		return x.Dependency
	}
	return nil
}

func (x *DependencyState) GetDns() *DNSState {
	if x != nil {
		return x.Dns
	}
	return nil
}

type DependencyPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *DependencyState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Skip  bool             `protobuf:"varint,2,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *DependencyPlan) Reset() {
	*x = DependencyPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyPlan) ProtoMessage() {}

func (x *DependencyPlan) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyPlan.ProtoReflect.Descriptor instead.
func (*DependencyPlan) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{26}
}

func (x *DependencyPlan) GetState() *DependencyState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *DependencyPlan) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

type PluginState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registry []byte            `protobuf:"bytes,1,opt,name=registry,proto3" json:"registry,omitempty"`
	Other    map[string][]byte `protobuf:"bytes,2,rep,name=other,proto3" json:"other,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PluginState) Reset() {
	*x = PluginState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginState) ProtoMessage() {}

func (x *PluginState) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginState.ProtoReflect.Descriptor instead.
func (*PluginState) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{27}
}

func (x *PluginState) GetRegistry() []byte {
	if x != nil {
		return x.Registry
	}
	return nil
}

func (x *PluginState) GetOther() map[string][]byte {
	if x != nil {
		return x.Other
	}
	return nil
}

type PlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps         []*AppPlan        `protobuf:"bytes,1,rep,name=apps,proto3" json:"apps,omitempty"`
	Dependencies []*DependencyPlan `protobuf:"bytes,2,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	Domains      []*DomainInfo     `protobuf:"bytes,3,rep,name=domains,proto3" json:"domains,omitempty"`
	Destroy      bool              `protobuf:"varint,4,opt,name=destroy,proto3" json:"destroy,omitempty"`
	Verify       bool              `protobuf:"varint,5,opt,name=verify,proto3" json:"verify,omitempty"`
	State        *PluginState      `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Priority     int32             `protobuf:"varint,8,opt,name=priority,proto3" json:"priority,omitempty"`
	Args         *structpb.Struct  `protobuf:"bytes,7,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *PlanRequest) Reset() {
	*x = PlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanRequest) ProtoMessage() {}

func (x *PlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanRequest.ProtoReflect.Descriptor instead.
func (*PlanRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{28}
}

func (x *PlanRequest) GetApps() []*AppPlan {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *PlanRequest) GetDependencies() []*DependencyPlan {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *PlanRequest) GetDomains() []*DomainInfo {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *PlanRequest) GetDestroy() bool {
	if x != nil {
		return x.Destroy
	}
	return false
}

func (x *PlanRequest) GetVerify() bool {
	if x != nil {
		return x.Verify
	}
	return false
}

func (x *PlanRequest) GetState() *PluginState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *PlanRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *PlanRequest) GetArgs() *structpb.Struct {
	if x != nil {
		return x.Args
	}
	return nil
}

type PlanAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       PlanType `protobuf:"varint,1,opt,name=type,proto3,enum=api.v1.PlanType" json:"type,omitempty"`
	Source     string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Namespace  string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ObjectId   string   `protobuf:"bytes,4,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	ObjectType string   `protobuf:"bytes,5,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	ObjectName string   `protobuf:"bytes,6,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	Fields     []string `protobuf:"bytes,8,rep,name=fields,proto3" json:"fields,omitempty"`
	Critical   bool     `protobuf:"varint,7,opt,name=critical,proto3" json:"critical,omitempty"`
}

func (x *PlanAction) Reset() {
	*x = PlanAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanAction) ProtoMessage() {}

func (x *PlanAction) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanAction.ProtoReflect.Descriptor instead.
func (*PlanAction) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{29}
}

func (x *PlanAction) GetType() PlanType {
	if x != nil {
		return x.Type
	}
	return PlanType_PLAN_TYPE_UNSPECIFIED
}

func (x *PlanAction) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PlanAction) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PlanAction) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *PlanAction) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *PlanAction) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

func (x *PlanAction) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PlanAction) GetCritical() bool {
	if x != nil {
		return x.Critical
	}
	return false
}

type Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*PlanAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *Plan) Reset() {
	*x = Plan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{30}
}

func (x *Plan) GetActions() []*PlanAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type PlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deploy           *Plan                       `protobuf:"bytes,1,opt,name=deploy,proto3" json:"deploy,omitempty"`
	Domains          []*DomainInfo               `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	State            *PluginState                `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	AppStates        map[string]*AppState        `protobuf:"bytes,4,rep,name=app_states,json=appStates,proto3" json:"app_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DependencyStates map[string]*DependencyState `protobuf:"bytes,5,rep,name=dependency_states,json=dependencyStates,proto3" json:"dependency_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DnsRecords       []*DNSRecord                `protobuf:"bytes,6,rep,name=dns_records,json=dnsRecords,proto3" json:"dns_records,omitempty"`
}

func (x *PlanResponse) Reset() {
	*x = PlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanResponse) ProtoMessage() {}

func (x *PlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanResponse.ProtoReflect.Descriptor instead.
func (*PlanResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{31}
}

func (x *PlanResponse) GetDeploy() *Plan {
	if x != nil {
		return x.Deploy
	}
	return nil
}

func (x *PlanResponse) GetDomains() []*DomainInfo {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *PlanResponse) GetState() *PluginState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *PlanResponse) GetAppStates() map[string]*AppState {
	if x != nil {
		return x.AppStates
	}
	return nil
}

func (x *PlanResponse) GetDependencyStates() map[string]*DependencyState {
	if x != nil {
		return x.DependencyStates
	}
	return nil
}

func (x *PlanResponse) GetDnsRecords() []*DNSRecord {
	if x != nil {
		return x.DnsRecords
	}
	return nil
}

type ApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps         []*AppPlan        `protobuf:"bytes,1,rep,name=apps,proto3" json:"apps,omitempty"`
	Dependencies []*DependencyPlan `protobuf:"bytes,2,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	Domains      []*DomainInfo     `protobuf:"bytes,3,rep,name=domains,proto3" json:"domains,omitempty"`
	Destroy      bool              `protobuf:"varint,4,opt,name=destroy,proto3" json:"destroy,omitempty"`
	State        *PluginState      `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Priority     int32             `protobuf:"varint,7,opt,name=priority,proto3" json:"priority,omitempty"`
	Args         *structpb.Struct  `protobuf:"bytes,6,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *ApplyRequest) Reset() {
	*x = ApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyRequest) ProtoMessage() {}

func (x *ApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyRequest.ProtoReflect.Descriptor instead.
func (*ApplyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{32}
}

func (x *ApplyRequest) GetApps() []*AppPlan {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *ApplyRequest) GetDependencies() []*DependencyPlan {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *ApplyRequest) GetDomains() []*DomainInfo {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *ApplyRequest) GetDestroy() bool {
	if x != nil {
		return x.Destroy
	}
	return false
}

func (x *ApplyRequest) GetState() *PluginState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ApplyRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ApplyRequest) GetArgs() *structpb.Struct {
	if x != nil {
		return x.Args
	}
	return nil
}

type ApplyAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Type       PlanType `protobuf:"varint,2,opt,name=type,proto3,enum=api.v1.PlanType" json:"type,omitempty"`
	Namespace  string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ObjectId   string   `protobuf:"bytes,4,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	ObjectType string   `protobuf:"bytes,5,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	ObjectName string   `protobuf:"bytes,6,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	Progress   int32    `protobuf:"varint,7,opt,name=progress,proto3" json:"progress,omitempty"`
	Total      int32    `protobuf:"varint,8,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ApplyAction) Reset() {
	*x = ApplyAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyAction) ProtoMessage() {}

func (x *ApplyAction) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyAction.ProtoReflect.Descriptor instead.
func (*ApplyAction) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{33}
}

func (x *ApplyAction) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ApplyAction) GetType() PlanType {
	if x != nil {
		return x.Type
	}
	return PlanType_PLAN_TYPE_UNSPECIFIED
}

func (x *ApplyAction) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ApplyAction) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ApplyAction) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *ApplyAction) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

func (x *ApplyAction) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *ApplyAction) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ApplyActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*ApplyAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *ApplyActionResponse) Reset() {
	*x = ApplyActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyActionResponse) ProtoMessage() {}

func (x *ApplyActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyActionResponse.ProtoReflect.Descriptor instead.
func (*ApplyActionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{34}
}

func (x *ApplyActionResponse) GetActions() []*ApplyAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type ApplyDoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State            *PluginState                `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Domains          []*DomainInfo               `protobuf:"bytes,5,rep,name=domains,proto3" json:"domains,omitempty"`
	AppStates        map[string]*AppState        `protobuf:"bytes,2,rep,name=app_states,json=appStates,proto3" json:"app_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DependencyStates map[string]*DependencyState `protobuf:"bytes,3,rep,name=dependency_states,json=dependencyStates,proto3" json:"dependency_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DnsRecords       []*DNSRecord                `protobuf:"bytes,4,rep,name=dns_records,json=dnsRecords,proto3" json:"dns_records,omitempty"`
}

func (x *ApplyDoneResponse) Reset() {
	*x = ApplyDoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyDoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyDoneResponse) ProtoMessage() {}

func (x *ApplyDoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyDoneResponse.ProtoReflect.Descriptor instead.
func (*ApplyDoneResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{35}
}

func (x *ApplyDoneResponse) GetState() *PluginState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ApplyDoneResponse) GetDomains() []*DomainInfo {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *ApplyDoneResponse) GetAppStates() map[string]*AppState {
	if x != nil {
		return x.AppStates
	}
	return nil
}

func (x *ApplyDoneResponse) GetDependencyStates() map[string]*DependencyState {
	if x != nil {
		return x.DependencyStates
	}
	return nil
}

func (x *ApplyDoneResponse) GetDnsRecords() []*DNSRecord {
	if x != nil {
		return x.DnsRecords
	}
	return nil
}

type ApplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*ApplyResponse_Action
	//	*ApplyResponse_Done
	Response isApplyResponse_Response `protobuf_oneof:"response"`
}

func (x *ApplyResponse) Reset() {
	*x = ApplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyResponse) ProtoMessage() {}

func (x *ApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyResponse.ProtoReflect.Descriptor instead.
func (*ApplyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{36}
}

func (m *ApplyResponse) GetResponse() isApplyResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ApplyResponse) GetAction() *ApplyActionResponse {
	if x, ok := x.GetResponse().(*ApplyResponse_Action); ok {
		return x.Action
	}
	return nil
}

func (x *ApplyResponse) GetDone() *ApplyDoneResponse {
	if x, ok := x.GetResponse().(*ApplyResponse_Done); ok {
		return x.Done
	}
	return nil
}

type isApplyResponse_Response interface {
	isApplyResponse_Response()
}

type ApplyResponse_Action struct {
	Action *ApplyActionResponse `protobuf:"bytes,1,opt,name=action,proto3,oneof"`
}

type ApplyResponse_Done struct {
	Done *ApplyDoneResponse `protobuf:"bytes,2,opt,name=done,proto3,oneof"`
}

func (*ApplyResponse_Action) isApplyResponse_Response() {}

func (*ApplyResponse_Done) isApplyResponse_Response() {}

type LogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps         []*App                 `protobuf:"bytes,1,rep,name=apps,proto3" json:"apps,omitempty"`
	Dependencies []*Dependency          `protobuf:"bytes,2,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	State        *PluginState           `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Start        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	End          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
	Severity     LogSeverity            `protobuf:"varint,6,opt,name=severity,proto3,enum=api.v1.LogSeverity" json:"severity,omitempty"`
	Contains     []string               `protobuf:"bytes,7,rep,name=contains,proto3" json:"contains,omitempty"`
	NotContains  []string               `protobuf:"bytes,8,rep,name=not_contains,json=notContains,proto3" json:"not_contains,omitempty"`
	Filter       string                 `protobuf:"bytes,9,opt,name=filter,proto3" json:"filter,omitempty"`
	Follow       bool                   `protobuf:"varint,10,opt,name=follow,proto3" json:"follow,omitempty"`
}

func (x *LogsRequest) Reset() {
	*x = LogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsRequest) ProtoMessage() {}

func (x *LogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsRequest.ProtoReflect.Descriptor instead.
func (*LogsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{37}
}

func (x *LogsRequest) GetApps() []*App {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *LogsRequest) GetDependencies() []*Dependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *LogsRequest) GetState() *PluginState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *LogsRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *LogsRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *LogsRequest) GetSeverity() LogSeverity {
	if x != nil {
		return x.Severity
	}
	return LogSeverity_LOG_SEVERITY_UNSPECIFIED
}

func (x *LogsRequest) GetContains() []string {
	if x != nil {
		return x.Contains
	}
	return nil
}

func (x *LogsRequest) GetNotContains() []string {
	if x != nil {
		return x.NotContains
	}
	return nil
}

func (x *LogsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *LogsRequest) GetFollow() bool {
	if x != nil {
		return x.Follow
	}
	return false
}

type LogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source   string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Type     LogsResponse_Type      `protobuf:"varint,2,opt,name=type,proto3,enum=api.v1.LogsResponse_Type" json:"type,omitempty"`
	Time     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Severity LogSeverity            `protobuf:"varint,4,opt,name=severity,proto3,enum=api.v1.LogSeverity" json:"severity,omitempty"`
	Http     *LogsResponse_Http     `protobuf:"bytes,5,opt,name=http,proto3" json:"http,omitempty"`
	// Types that are assignable to Payload:
	//	*LogsResponse_Text
	//	*LogsResponse_Json
	Payload isLogsResponse_Payload `protobuf_oneof:"payload"`
}

func (x *LogsResponse) Reset() {
	*x = LogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsResponse) ProtoMessage() {}

func (x *LogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsResponse.ProtoReflect.Descriptor instead.
func (*LogsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{38}
}

func (x *LogsResponse) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *LogsResponse) GetType() LogsResponse_Type {
	if x != nil {
		return x.Type
	}
	return LogsResponse_TYPE_UNSPECIFIED
}

func (x *LogsResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *LogsResponse) GetSeverity() LogSeverity {
	if x != nil {
		return x.Severity
	}
	return LogSeverity_LOG_SEVERITY_UNSPECIFIED
}

func (x *LogsResponse) GetHttp() *LogsResponse_Http {
	if x != nil {
		return x.Http
	}
	return nil
}

func (m *LogsResponse) GetPayload() isLogsResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *LogsResponse) GetText() string {
	if x, ok := x.GetPayload().(*LogsResponse_Text); ok {
		return x.Text
	}
	return ""
}

func (x *LogsResponse) GetJson() *structpb.Struct {
	if x, ok := x.GetPayload().(*LogsResponse_Json); ok {
		return x.Json
	}
	return nil
}

type isLogsResponse_Payload interface {
	isLogsResponse_Payload()
}

type LogsResponse_Text struct {
	Text string `protobuf:"bytes,6,opt,name=text,proto3,oneof"`
}

type LogsResponse_Json struct {
	Json *structpb.Struct `protobuf:"bytes,7,opt,name=json,proto3,oneof"`
}

func (*LogsResponse_Text) isLogsResponse_Payload() {}

func (*LogsResponse_Json) isLogsResponse_Payload() {}

type DomainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domains   []string         `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	Cert      string           `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Key       string           `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	DnsPlugin string           `protobuf:"bytes,4,opt,name=dns_plugin,json=dnsPlugin,proto3" json:"dns_plugin,omitempty"`
	Other     *structpb.Struct `protobuf:"bytes,5,opt,name=other,proto3" json:"other,omitempty"`
}

func (x *DomainInfo) Reset() {
	*x = DomainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainInfo) ProtoMessage() {}

func (x *DomainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainInfo.ProtoReflect.Descriptor instead.
func (*DomainInfo) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{39}
}

func (x *DomainInfo) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *DomainInfo) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *DomainInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DomainInfo) GetDnsPlugin() string {
	if x != nil {
		return x.DnsPlugin
	}
	return ""
}

func (x *DomainInfo) GetOther() *structpb.Struct {
	if x != nil {
		return x.Other
	}
	return nil
}

type DNSRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record  string         `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	Value   string         `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type    DNSRecord_Type `protobuf:"varint,3,opt,name=type,proto3,enum=api.v1.DNSRecord_Type" json:"type,omitempty"`
	Created bool           `protobuf:"varint,4,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *DNSRecord) Reset() {
	*x = DNSRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSRecord) ProtoMessage() {}

func (x *DNSRecord) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSRecord.ProtoReflect.Descriptor instead.
func (*DNSRecord) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{40}
}

func (x *DNSRecord) GetRecord() string {
	if x != nil {
		return x.Record
	}
	return ""
}

func (x *DNSRecord) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DNSRecord) GetType() DNSRecord_Type {
	if x != nil {
		return x.Type
	}
	return DNSRecord_TYPE_UNSPECIFIED
}

func (x *DNSRecord) GetCreated() bool {
	if x != nil {
		return x.Created
	}
	return false
}

type ApplyDNSDoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      *PluginState  `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Domains    []*DomainInfo `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	DnsRecords []*DNSRecord  `protobuf:"bytes,3,rep,name=dns_records,json=dnsRecords,proto3" json:"dns_records,omitempty"`
}

func (x *ApplyDNSDoneResponse) Reset() {
	*x = ApplyDNSDoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyDNSDoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyDNSDoneResponse) ProtoMessage() {}

func (x *ApplyDNSDoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyDNSDoneResponse.ProtoReflect.Descriptor instead.
func (*ApplyDNSDoneResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{41}
}

func (x *ApplyDNSDoneResponse) GetState() *PluginState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ApplyDNSDoneResponse) GetDomains() []*DomainInfo {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *ApplyDNSDoneResponse) GetDnsRecords() []*DNSRecord {
	if x != nil {
		return x.DnsRecords
	}
	return nil
}

type PlanDNSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsRecords []*DNSRecord     `protobuf:"bytes,1,rep,name=dns_records,json=dnsRecords,proto3" json:"dns_records,omitempty"`
	Domains    []*DomainInfo    `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	Destroy    bool             `protobuf:"varint,3,opt,name=destroy,proto3" json:"destroy,omitempty"`
	Verify     bool             `protobuf:"varint,4,opt,name=verify,proto3" json:"verify,omitempty"`
	State      *PluginState     `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Args       *structpb.Struct `protobuf:"bytes,6,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *PlanDNSRequest) Reset() {
	*x = PlanDNSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanDNSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanDNSRequest) ProtoMessage() {}

func (x *PlanDNSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanDNSRequest.ProtoReflect.Descriptor instead.
func (*PlanDNSRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{42}
}

func (x *PlanDNSRequest) GetDnsRecords() []*DNSRecord {
	if x != nil {
		return x.DnsRecords
	}
	return nil
}

func (x *PlanDNSRequest) GetDomains() []*DomainInfo {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *PlanDNSRequest) GetDestroy() bool {
	if x != nil {
		return x.Destroy
	}
	return false
}

func (x *PlanDNSRequest) GetVerify() bool {
	if x != nil {
		return x.Verify
	}
	return false
}

func (x *PlanDNSRequest) GetState() *PluginState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *PlanDNSRequest) GetArgs() *structpb.Struct {
	if x != nil {
		return x.Args
	}
	return nil
}

type PlanDNSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dns        *Plan         `protobuf:"bytes,1,opt,name=dns,proto3" json:"dns,omitempty"`
	State      *PluginState  `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Domains    []*DomainInfo `protobuf:"bytes,3,rep,name=domains,proto3" json:"domains,omitempty"`
	DnsRecords []*DNSRecord  `protobuf:"bytes,4,rep,name=dns_records,json=dnsRecords,proto3" json:"dns_records,omitempty"`
}

func (x *PlanDNSResponse) Reset() {
	*x = PlanDNSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanDNSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanDNSResponse) ProtoMessage() {}

func (x *PlanDNSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanDNSResponse.ProtoReflect.Descriptor instead.
func (*PlanDNSResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{43}
}

func (x *PlanDNSResponse) GetDns() *Plan {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *PlanDNSResponse) GetState() *PluginState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *PlanDNSResponse) GetDomains() []*DomainInfo {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *PlanDNSResponse) GetDnsRecords() []*DNSRecord {
	if x != nil {
		return x.DnsRecords
	}
	return nil
}

type ApplyDNSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsRecords []*DNSRecord     `protobuf:"bytes,1,rep,name=dns_records,json=dnsRecords,proto3" json:"dns_records,omitempty"`
	Domains    []*DomainInfo    `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	Destroy    bool             `protobuf:"varint,3,opt,name=destroy,proto3" json:"destroy,omitempty"`
	State      *PluginState     `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Args       *structpb.Struct `protobuf:"bytes,5,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *ApplyDNSRequest) Reset() {
	*x = ApplyDNSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyDNSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyDNSRequest) ProtoMessage() {}

func (x *ApplyDNSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyDNSRequest.ProtoReflect.Descriptor instead.
func (*ApplyDNSRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{44}
}

func (x *ApplyDNSRequest) GetDnsRecords() []*DNSRecord {
	if x != nil {
		return x.DnsRecords
	}
	return nil
}

func (x *ApplyDNSRequest) GetDomains() []*DomainInfo {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *ApplyDNSRequest) GetDestroy() bool {
	if x != nil {
		return x.Destroy
	}
	return false
}

func (x *ApplyDNSRequest) GetState() *PluginState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ApplyDNSRequest) GetArgs() *structpb.Struct {
	if x != nil {
		return x.Args
	}
	return nil
}

type ApplyDNSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*ApplyDNSResponse_Action
	//	*ApplyDNSResponse_Done
	Response isApplyDNSResponse_Response `protobuf_oneof:"response"`
}

func (x *ApplyDNSResponse) Reset() {
	*x = ApplyDNSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyDNSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyDNSResponse) ProtoMessage() {}

func (x *ApplyDNSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyDNSResponse.ProtoReflect.Descriptor instead.
func (*ApplyDNSResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{45}
}

func (m *ApplyDNSResponse) GetResponse() isApplyDNSResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ApplyDNSResponse) GetAction() *ApplyActionResponse {
	if x, ok := x.GetResponse().(*ApplyDNSResponse_Action); ok {
		return x.Action
	}
	return nil
}

func (x *ApplyDNSResponse) GetDone() *ApplyDNSDoneResponse {
	if x, ok := x.GetResponse().(*ApplyDNSResponse_Done); ok {
		return x.Done
	}
	return nil
}

type isApplyDNSResponse_Response interface {
	isApplyDNSResponse_Response()
}

type ApplyDNSResponse_Action struct {
	Action *ApplyActionResponse `protobuf:"bytes,1,opt,name=action,proto3,oneof"`
}

type ApplyDNSResponse_Done struct {
	Done *ApplyDNSDoneResponse `protobuf:"bytes,2,opt,name=done,proto3,oneof"`
}

func (*ApplyDNSResponse_Action) isApplyDNSResponse_Response() {}

func (*ApplyDNSResponse_Done) isApplyDNSResponse_Response() {}

type AppRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App     *App              `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Url     string            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Ip      string            `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port    int32             `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Command []string          `protobuf:"bytes,5,rep,name=command,proto3" json:"command,omitempty"`
	Env     map[string]string `protobuf:"bytes,6,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Other   *structpb.Struct  `protobuf:"bytes,7,opt,name=other,proto3" json:"other,omitempty"`
}

func (x *AppRun) Reset() {
	*x = AppRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppRun) ProtoMessage() {}

func (x *AppRun) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppRun.ProtoReflect.Descriptor instead.
func (*AppRun) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{46}
}

func (x *AppRun) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *AppRun) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AppRun) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AppRun) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AppRun) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *AppRun) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *AppRun) GetOther() *structpb.Struct {
	if x != nil {
		return x.Other
	}
	return nil
}

type DependencyRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dependency *Dependency `protobuf:"bytes,1,opt,name=dependency,proto3" json:"dependency,omitempty"`
	Ip         string      `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port       int32       `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *DependencyRun) Reset() {
	*x = DependencyRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyRun) ProtoMessage() {}

func (x *DependencyRun) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyRun.ProtoReflect.Descriptor instead.
func (*DependencyRun) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{47}
}

func (x *DependencyRun) GetDependency() *Dependency {
	if x != nil {
		return x.Dependency
	}
	return nil
}

func (x *DependencyRun) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DependencyRun) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type RunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps         []*AppRun         `protobuf:"bytes,1,rep,name=apps,proto3" json:"apps,omitempty"`
	Dependencies []*DependencyRun  `protobuf:"bytes,2,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	Hosts        map[string]string `protobuf:"bytes,3,rep,name=hosts,proto3" json:"hosts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Args         *structpb.Struct  `protobuf:"bytes,4,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *RunRequest) Reset() {
	*x = RunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequest) ProtoMessage() {}

func (x *RunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequest.ProtoReflect.Descriptor instead.
func (*RunRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{48}
}

func (x *RunRequest) GetApps() []*AppRun {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *RunRequest) GetDependencies() []*DependencyRun {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *RunRequest) GetHosts() map[string]string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *RunRequest) GetArgs() *structpb.Struct {
	if x != nil {
		return x.Args
	}
	return nil
}

type RunVars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vars map[string]string `protobuf:"bytes,1,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RunVars) Reset() {
	*x = RunVars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunVars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunVars) ProtoMessage() {}

func (x *RunVars) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunVars.ProtoReflect.Descriptor instead.
func (*RunVars) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{49}
}

func (x *RunVars) GetVars() map[string]string {
	if x != nil {
		return x.Vars
	}
	return nil
}

type RunStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vars map[string]*RunVars `protobuf:"bytes,1,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RunStartResponse) Reset() {
	*x = RunStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunStartResponse) ProtoMessage() {}

func (x *RunStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunStartResponse.ProtoReflect.Descriptor instead.
func (*RunStartResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{50}
}

func (x *RunStartResponse) GetVars() map[string]*RunVars {
	if x != nil {
		return x.Vars
	}
	return nil
}

type RunOutputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source  RunOutputResponse_Source `protobuf:"varint,1,opt,name=source,proto3,enum=api.v1.RunOutputResponse_Source" json:"source,omitempty"`
	Id      string                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name    string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Stream  RunOutputResponse_Stream `protobuf:"varint,4,opt,name=stream,proto3,enum=api.v1.RunOutputResponse_Stream" json:"stream,omitempty"`
	Message string                   `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RunOutputResponse) Reset() {
	*x = RunOutputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunOutputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunOutputResponse) ProtoMessage() {}

func (x *RunOutputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunOutputResponse.ProtoReflect.Descriptor instead.
func (*RunOutputResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{51}
}

func (x *RunOutputResponse) GetSource() RunOutputResponse_Source {
	if x != nil {
		return x.Source
	}
	return RunOutputResponse_SOURCE_UNSPECIFIED
}

func (x *RunOutputResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RunOutputResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunOutputResponse) GetStream() RunOutputResponse_Stream {
	if x != nil {
		return x.Stream
	}
	return RunOutputResponse_STREAM_UNSPECIFIED
}

func (x *RunOutputResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*RunResponse_Start
	//	*RunResponse_Output
	Response isRunResponse_Response `protobuf_oneof:"response"`
}

func (x *RunResponse) Reset() {
	*x = RunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponse) ProtoMessage() {}

func (x *RunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponse.ProtoReflect.Descriptor instead.
func (*RunResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{52}
}

func (m *RunResponse) GetResponse() isRunResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *RunResponse) GetStart() *RunStartResponse {
	if x, ok := x.GetResponse().(*RunResponse_Start); ok {
		return x.Start
	}
	return nil
}

func (x *RunResponse) GetOutput() *RunOutputResponse {
	if x, ok := x.GetResponse().(*RunResponse_Output); ok {
		return x.Output
	}
	return nil
}

type isRunResponse_Response interface {
	isRunResponse_Response()
}

type RunResponse_Start struct {
	Start *RunStartResponse `protobuf:"bytes,1,opt,name=start,proto3,oneof"`
}

type RunResponse_Output struct {
	Output *RunOutputResponse `protobuf:"bytes,2,opt,name=output,proto3,oneof"`
}

func (*RunResponse_Start) isRunResponse_Response() {}

func (*RunResponse_Output) isRunResponse_Response() {}

type CommandArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positional []string         `protobuf:"bytes,1,rep,name=positional,proto3" json:"positional,omitempty"`
	Flags      *structpb.Struct `protobuf:"bytes,2,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *CommandArgs) Reset() {
	*x = CommandArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandArgs) ProtoMessage() {}

func (x *CommandArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandArgs.ProtoReflect.Descriptor instead.
func (*CommandArgs) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{53}
}

func (x *CommandArgs) GetPositional() []string {
	if x != nil {
		return x.Positional
	}
	return nil
}

func (x *CommandArgs) GetFlags() *structpb.Struct {
	if x != nil {
		return x.Flags
	}
	return nil
}

type CommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string       `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Args    *CommandArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
	// Possible input.
	AppStates        map[string]*AppState        `protobuf:"bytes,3,rep,name=app_states,json=appStates,proto3" json:"app_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DependencyStates map[string]*DependencyState `protobuf:"bytes,4,rep,name=dependency_states,json=dependencyStates,proto3" json:"dependency_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PluginState      *PluginState                `protobuf:"bytes,5,opt,name=plugin_state,json=pluginState,proto3" json:"plugin_state,omitempty"`
}

func (x *CommandRequest) Reset() {
	*x = CommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequest) ProtoMessage() {}

func (x *CommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequest.ProtoReflect.Descriptor instead.
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{54}
}

func (x *CommandRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CommandRequest) GetArgs() *CommandArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CommandRequest) GetAppStates() map[string]*AppState {
	if x != nil {
		return x.AppStates
	}
	return nil
}

func (x *CommandRequest) GetDependencyStates() map[string]*DependencyState {
	if x != nil {
		return x.DependencyStates
	}
	return nil
}

func (x *CommandRequest) GetPluginState() *PluginState {
	if x != nil {
		return x.PluginState
	}
	return nil
}

type CommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommandResponse) Reset() {
	*x = CommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResponse) ProtoMessage() {}

func (x *CommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResponse.ProtoReflect.Descriptor instead.
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{55}
}

type DeployHookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage        DeployHookRequest_Stage `protobuf:"varint,1,opt,name=stage,proto3,enum=api.v1.DeployHookRequest_Stage" json:"stage,omitempty"`
	Apps         []*AppPlan              `protobuf:"bytes,2,rep,name=apps,proto3" json:"apps,omitempty"`
	Dependencies []*DependencyPlan       `protobuf:"bytes,3,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	Domains      []*DomainInfo           `protobuf:"bytes,4,rep,name=domains,proto3" json:"domains,omitempty"`
	Destroy      bool                    `protobuf:"varint,5,opt,name=destroy,proto3" json:"destroy,omitempty"`
	Verify       bool                    `protobuf:"varint,6,opt,name=verify,proto3" json:"verify,omitempty"`
	State        *PluginState            `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	Args         *structpb.Struct        `protobuf:"bytes,8,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *DeployHookRequest) Reset() {
	*x = DeployHookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployHookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployHookRequest) ProtoMessage() {}

func (x *DeployHookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployHookRequest.ProtoReflect.Descriptor instead.
func (*DeployHookRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{56}
}

func (x *DeployHookRequest) GetStage() DeployHookRequest_Stage {
	if x != nil {
		return x.Stage
	}
	return DeployHookRequest_STAGE_UNSPECIFIED
}

func (x *DeployHookRequest) GetApps() []*AppPlan {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *DeployHookRequest) GetDependencies() []*DependencyPlan {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *DeployHookRequest) GetDomains() []*DomainInfo {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *DeployHookRequest) GetDestroy() bool {
	if x != nil {
		return x.Destroy
	}
	return false
}

func (x *DeployHookRequest) GetVerify() bool {
	if x != nil {
		return x.Verify
	}
	return false
}

func (x *DeployHookRequest) GetState() *PluginState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *DeployHookRequest) GetArgs() *structpb.Struct {
	if x != nil {
		return x.Args
	}
	return nil
}

type DeployHookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State            *PluginState                `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Domains          []*DomainInfo               `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	AppStates        map[string]*AppState        `protobuf:"bytes,3,rep,name=app_states,json=appStates,proto3" json:"app_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DependencyStates map[string]*DependencyState `protobuf:"bytes,4,rep,name=dependency_states,json=dependencyStates,proto3" json:"dependency_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DnsRecords       []*DNSRecord                `protobuf:"bytes,5,rep,name=dns_records,json=dnsRecords,proto3" json:"dns_records,omitempty"`
}

func (x *DeployHookResponse) Reset() {
	*x = DeployHookResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployHookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployHookResponse) ProtoMessage() {}

func (x *DeployHookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployHookResponse.ProtoReflect.Descriptor instead.
func (*DeployHookResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{57}
}

func (x *DeployHookResponse) GetState() *PluginState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *DeployHookResponse) GetDomains() []*DomainInfo {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *DeployHookResponse) GetAppStates() map[string]*AppState {
	if x != nil {
		return x.AppStates
	}
	return nil
}

func (x *DeployHookResponse) GetDependencyStates() map[string]*DependencyState {
	if x != nil {
		return x.DependencyStates
	}
	return nil
}

func (x *DeployHookResponse) GetDnsRecords() []*DNSRecord {
	if x != nil {
		return x.DnsRecords
	}
	return nil
}

type GetStateResponse_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State        []byte `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	LockInfo     string `protobuf:"bytes,2,opt,name=lock_info,json=lockInfo,proto3" json:"lock_info,omitempty"`
	StateCreated bool   `protobuf:"varint,3,opt,name=state_created,json=stateCreated,proto3" json:"state_created,omitempty"`
	StateName    string `protobuf:"bytes,4,opt,name=state_name,json=stateName,proto3" json:"state_name,omitempty"`
}

func (x *GetStateResponse_State) Reset() {
	*x = GetStateResponse_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateResponse_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateResponse_State) ProtoMessage() {}

func (x *GetStateResponse_State) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateResponse_State.ProtoReflect.Descriptor instead.
func (*GetStateResponse_State) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetStateResponse_State) GetState() []byte {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *GetStateResponse_State) GetLockInfo() string {
	if x != nil {
		return x.LockInfo
	}
	return ""
}

func (x *GetStateResponse_State) GetStateCreated() bool {
	if x != nil {
		return x.StateCreated
	}
	return false
}

func (x *GetStateResponse_State) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

type LogsResponse_Http struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMethod string               `protobuf:"bytes,1,opt,name=request_method,json=requestMethod,proto3" json:"request_method,omitempty"`
	RequestUrl    string               `protobuf:"bytes,2,opt,name=request_url,json=requestUrl,proto3" json:"request_url,omitempty"`
	RequestSize   int64                `protobuf:"varint,3,opt,name=request_size,json=requestSize,proto3" json:"request_size,omitempty"`
	Status        int32                `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	ResponseSize  int64                `protobuf:"varint,5,opt,name=response_size,json=responseSize,proto3" json:"response_size,omitempty"`
	RemoteIp      string               `protobuf:"bytes,6,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	ServerIp      string               `protobuf:"bytes,7,opt,name=server_ip,json=serverIp,proto3" json:"server_ip,omitempty"`
	UserAgent     string               `protobuf:"bytes,8,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Referer       string               `protobuf:"bytes,9,opt,name=referer,proto3" json:"referer,omitempty"`
	Latency       *durationpb.Duration `protobuf:"bytes,10,opt,name=latency,proto3" json:"latency,omitempty"`
	Protocol      string               `protobuf:"bytes,11,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *LogsResponse_Http) Reset() {
	*x = LogsResponse_Http{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_plugin_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogsResponse_Http) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsResponse_Http) ProtoMessage() {}

func (x *LogsResponse_Http) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_plugin_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsResponse_Http.ProtoReflect.Descriptor instead.
func (*LogsResponse_Http) Descriptor() ([]byte, []int) {
	return file_api_v1_plugin_proto_rawDescGZIP(), []int{38, 0}
}

func (x *LogsResponse_Http) GetRequestMethod() string {
	if x != nil {
		return x.RequestMethod
	}
	return ""
}

func (x *LogsResponse_Http) GetRequestUrl() string {
	if x != nil {
		return x.RequestUrl
	}
	return ""
}

func (x *LogsResponse_Http) GetRequestSize() int64 {
	if x != nil {
		return x.RequestSize
	}
	return 0
}

func (x *LogsResponse_Http) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *LogsResponse_Http) GetResponseSize() int64 {
	if x != nil {
		return x.ResponseSize
	}
	return 0
}

func (x *LogsResponse_Http) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *LogsResponse_Http) GetServerIp() string {
	if x != nil {
		return x.ServerIp
	}
	return ""
}

func (x *LogsResponse_Http) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *LogsResponse_Http) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

func (x *LogsResponse_Http) GetLatency() *durationpb.Duration {
	if x != nil {
		return x.Latency
	}
	return nil
}

func (x *LogsResponse_Http) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

var File_api_v1_plugin_proto protoreflect.FileDescriptor

var file_api_v1_plugin_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x0b,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x22, 0x0e, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x22, 0x4e, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x36, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x74, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x22, 0xf2, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x7e, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x53, 0x61, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x61, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22,
	0x1a, 0x0a, 0x18, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x13,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x74, 0x6c,
	0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x14, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x05,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x4c,
	0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x05, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x16,
	0x0a, 0x14, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x12, 0x30, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65,
	0x6e, 0x76, 0x12, 0x2d, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x62, 0x0a, 0x07, 0x41, 0x70, 0x70,
	0x4e, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x8b, 0x04,
	0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x4e, 0x65,
	0x65, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x12,
	0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x49, 0x0a, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x4e, 0x65, 0x65, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x04, 0x0a, 0x08,
	0x44, 0x4e, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55,
	0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x55, 0x72,
	0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x73, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x4e, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x53, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x09, 0x73, 0x73, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x73, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x73, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x09, 0x53, 0x53, 0x4c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x4b, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x22, 0x0a, 0x1e, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x04, 0x22, 0x41, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61,
	0x70, 0x70, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x64,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x4e, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x22,
	0x64, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x48, 0x61, 0x73, 0x68, 0x22, 0x6d, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x73, 0x6b, 0x69, 0x70, 0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x69, 0x0a, 0x0f, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x0a,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x22, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x03, 0x64, 0x6e, 0x73, 0x22, 0x53, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x1a, 0x38, 0x0a, 0x0a, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2, 0x02, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x0a, 0x50,
	0x6c, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x22, 0x34, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x2c, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8c,
	0x04, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x06, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42,
	0x0a, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x64,
	0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a,
	0x4e, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x5c, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x02,
	0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x61,
	0x70, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2b,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x0b,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x44, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf5,
	0x03, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x47, 0x0a,
	0x0a, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x70, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x64, 0x6e,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x4e, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x03, 0x0a,
	0x0b, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04,
	0x61, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x12, 0x36, 0x0a,
	0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x22, 0xea, 0x05, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x68, 0x74, 0x74,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2d,
	0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0xf2, 0x02,
	0x0a, 0x04, 0x48, 0x74, 0x74, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x72, 0x12, 0x33, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x22, 0x3e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x44, 0x4f, 0x55, 0x54, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x44, 0x45, 0x52, 0x52,
	0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x9a, 0x01,
	0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x6e, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x6e, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22, 0xc8, 0x01, 0x0a, 0x09, 0x44,
	0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4e,
	0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x47, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x41, 0x41, 0x41, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x03, 0x22, 0xa3, 0x01, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44,
	0x4e, 0x53, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x0a, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x0e,
	0x50, 0x6c, 0x61, 0x6e, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x0f, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x0a, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x0f,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4e,
	0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x4e, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x4e, 0x53, 0x44,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x6f, 0x6e, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x89, 0x02, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x52, 0x75, 0x6e, 0x12, 0x1d, 0x0a, 0x03, 0x61, 0x70,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x52, 0x75, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x03, 0x65, 0x6e, 0x76, 0x12, 0x2d, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x0d, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x32, 0x0a, 0x0a,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x75,
	0x6e, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x75, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x71,
	0x0a, 0x07, 0x52, 0x75, 0x6e, 0x56, 0x61, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x76, 0x61, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x75, 0x6e, 0x56, 0x61, 0x72, 0x73, 0x2e, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56,
	0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x1a, 0x48,
	0x0a, 0x09, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x56, 0x61, 0x72, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x02, 0x0a, 0x11, 0x52, 0x75, 0x6e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x47, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x50, 0x50,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50,
	0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x02, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x44, 0x45, 0x52, 0x52, 0x10,
	0x02, 0x22, 0x80, 0x01, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x22, 0xda, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x27, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x59,
	0x0a, 0x11, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x4e, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x5c, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x11, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xd9, 0x03, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x48, 0x6f, 0x6f,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x23, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04,
	0x61, 0x70, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x74, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x47,
	0x45, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x47, 0x45,
	0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x04, 0x22, 0xf8,
	0x03, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x48,
	0x0a, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x0a, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x4e, 0x0a, 0x0e, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x15, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x96, 0x01, 0x0a, 0x08, 0x50, 0x6c,
	0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x05, 0x2a, 0xa6, 0x01, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x64, 0x12, 0x18, 0x0a, 0x13, 0x4c, 0x4f, 0x47, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10,
	0xc8, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xac, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x4c, 0x4f,
	0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x10,
	0x90, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xf4, 0x03, 0x32, 0xc5, 0x01, 0x0a, 0x12,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xee, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x09, 0x53,
	0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a,
	0x10, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x6b, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xae, 0x01, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a,
	0x0c, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x0c, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x80, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0x48, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x73,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x32, 0x8f, 0x01, 0x0a, 0x10, 0x44, 0x4e, 0x53, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x4e, 0x53, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x4e, 0x53, 0x12,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x4e,
	0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x32, 0x44, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12,
	0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0x52, 0x0a, 0x14, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x58,
	0x0a, 0x11, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x48, 0x6f, 0x6f,
	0x6b, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x48, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x75, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x2f, 0x6f, 0x75, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_plugin_proto_rawDescOnce sync.Once
	file_api_v1_plugin_proto_rawDescData = file_api_v1_plugin_proto_rawDesc
)

func file_api_v1_plugin_proto_rawDescGZIP() []byte {
	file_api_v1_plugin_proto_rawDescOnce.Do(func() {
		file_api_v1_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_plugin_proto_rawDescData)
	})
	return file_api_v1_plugin_proto_rawDescData
}

var file_api_v1_plugin_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_api_v1_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 78)
var file_api_v1_plugin_proto_goTypes = []interface{}{
	(PlanType)(0),                    // 0: api.v1.PlanType
	(LogSeverity)(0),                 // 1: api.v1.LogSeverity
	(DNSState_SSLStatus)(0),          // 2: api.v1.DNSState.SSLStatus
	(LogsResponse_Type)(0),           // 3: api.v1.LogsResponse.Type
	(DNSRecord_Type)(0),              // 4: api.v1.DNSRecord.Type
	(RunOutputResponse_Source)(0),    // 5: api.v1.RunOutputResponse.Source
	(RunOutputResponse_Stream)(0),    // 6: api.v1.RunOutputResponse.Stream
	(DeployHookRequest_Stage)(0),     // 7: api.v1.DeployHookRequest.Stage
	(*InitRequest)(nil),              // 8: api.v1.InitRequest
	(*InitResponse)(nil),             // 9: api.v1.InitResponse
	(*StartRequest)(nil),             // 10: api.v1.StartRequest
	(*StartResponse)(nil),            // 11: api.v1.StartResponse
	(*ProjectInitRequest)(nil),       // 12: api.v1.ProjectInitRequest
	(*ProjectInitResponse)(nil),      // 13: api.v1.ProjectInitResponse
	(*GetStateRequest)(nil),          // 14: api.v1.GetStateRequest
	(*GetStateResponse)(nil),         // 15: api.v1.GetStateResponse
	(*SaveStateRequest)(nil),         // 16: api.v1.SaveStateRequest
	(*SaveStateResponse)(nil),        // 17: api.v1.SaveStateResponse
	(*ReleaseStateLockRequest)(nil),  // 18: api.v1.ReleaseStateLockRequest
	(*ReleaseStateLockResponse)(nil), // 19: api.v1.ReleaseStateLockResponse
	(*AcquireLocksRequest)(nil),      // 20: api.v1.AcquireLocksRequest
	(*AcquireLocksResponse)(nil),     // 21: api.v1.AcquireLocksResponse
	(*ReleaseLocksRequest)(nil),      // 22: api.v1.ReleaseLocksRequest
	(*ReleaseLocksResponse)(nil),     // 23: api.v1.ReleaseLocksResponse
	(*AppDeployInfo)(nil),            // 24: api.v1.AppDeployInfo
	(*AppNeed)(nil),                  // 25: api.v1.AppNeed
	(*App)(nil),                      // 26: api.v1.App
	(*DNSState)(nil),                 // 27: api.v1.DNSState
	(*DeploymentState)(nil),          // 28: api.v1.DeploymentState
	(*AppState)(nil),                 // 29: api.v1.AppState
	(*AppBuild)(nil),                 // 30: api.v1.AppBuild
	(*AppPlan)(nil),                  // 31: api.v1.AppPlan
	(*Dependency)(nil),               // 32: api.v1.Dependency
	(*DependencyState)(nil),          // 33: api.v1.DependencyState
	(*DependencyPlan)(nil),           // 34: api.v1.DependencyPlan
	(*PluginState)(nil),              // 35: api.v1.PluginState
	(*PlanRequest)(nil),              // 36: api.v1.PlanRequest
	(*PlanAction)(nil),               // 37: api.v1.PlanAction
	(*Plan)(nil),                     // 38: api.v1.Plan
	(*PlanResponse)(nil),             // 39: api.v1.PlanResponse
	(*ApplyRequest)(nil),             // 40: api.v1.ApplyRequest
	(*ApplyAction)(nil),              // 41: api.v1.ApplyAction
	(*ApplyActionResponse)(nil),      // 42: api.v1.ApplyActionResponse
	(*ApplyDoneResponse)(nil),        // 43: api.v1.ApplyDoneResponse
	(*ApplyResponse)(nil),            // 44: api.v1.ApplyResponse
	(*LogsRequest)(nil),              // 45: api.v1.LogsRequest
	(*LogsResponse)(nil),             // 46: api.v1.LogsResponse
	(*DomainInfo)(nil),               // 47: api.v1.DomainInfo
	(*DNSRecord)(nil),                // 48: api.v1.DNSRecord
	(*ApplyDNSDoneResponse)(nil),     // 49: api.v1.ApplyDNSDoneResponse
	(*PlanDNSRequest)(nil),           // 50: api.v1.PlanDNSRequest
	(*PlanDNSResponse)(nil),          // 51: api.v1.PlanDNSResponse
	(*ApplyDNSRequest)(nil),          // 52: api.v1.ApplyDNSRequest
	(*ApplyDNSResponse)(nil),         // 53: api.v1.ApplyDNSResponse
	(*AppRun)(nil),                   // 54: api.v1.AppRun
	(*DependencyRun)(nil),            // 55: api.v1.DependencyRun
	(*RunRequest)(nil),               // 56: api.v1.RunRequest
	(*RunVars)(nil),                  // 57: api.v1.RunVars
	(*RunStartResponse)(nil),         // 58: api.v1.RunStartResponse
	(*RunOutputResponse)(nil),        // 59: api.v1.RunOutputResponse
	(*RunResponse)(nil),              // 60: api.v1.RunResponse
	(*CommandArgs)(nil),              // 61: api.v1.CommandArgs
	(*CommandRequest)(nil),           // 62: api.v1.CommandRequest
	(*CommandResponse)(nil),          // 63: api.v1.CommandResponse
	(*DeployHookRequest)(nil),        // 64: api.v1.DeployHookRequest
	(*DeployHookResponse)(nil),       // 65: api.v1.DeployHookResponse
	(*GetStateResponse_State)(nil),   // 66: api.v1.GetStateResponse.State
	nil,                              // 67: api.v1.AcquireLocksResponse.LocksEntry
	nil,                              // 68: api.v1.ReleaseLocksRequest.LocksEntry
	nil,                              // 69: api.v1.AppDeployInfo.EnvEntry
	nil,                              // 70: api.v1.App.EnvEntry
	nil,                              // 71: api.v1.App.NeedsEntry
	nil,                              // 72: api.v1.PluginState.OtherEntry
	nil,                              // 73: api.v1.PlanResponse.AppStatesEntry
	nil,                              // 74: api.v1.PlanResponse.DependencyStatesEntry
	nil,                              // 75: api.v1.ApplyDoneResponse.AppStatesEntry
	nil,                              // 76: api.v1.ApplyDoneResponse.DependencyStatesEntry
	(*LogsResponse_Http)(nil),        // 77: api.v1.LogsResponse.Http
	nil,                              // 78: api.v1.AppRun.EnvEntry
	nil,                              // 79: api.v1.RunRequest.HostsEntry
	nil,                              // 80: api.v1.RunVars.VarsEntry
	nil,                              // 81: api.v1.RunStartResponse.VarsEntry
	nil,                              // 82: api.v1.CommandRequest.AppStatesEntry
	nil,                              // 83: api.v1.CommandRequest.DependencyStatesEntry
	nil,                              // 84: api.v1.DeployHookResponse.AppStatesEntry
	nil,                              // 85: api.v1.DeployHookResponse.DependencyStatesEntry
	(*structpb.Struct)(nil),          // 86: google.protobuf.Struct
	(*durationpb.Duration)(nil),      // 87: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),    // 88: google.protobuf.Timestamp
}
var file_api_v1_plugin_proto_depIdxs = []int32{
	86,  // 0: api.v1.StartRequest.properties:type_name -> google.protobuf.Struct
	86,  // 1: api.v1.ProjectInitRequest.args:type_name -> google.protobuf.Struct
	86,  // 2: api.v1.ProjectInitResponse.properties:type_name -> google.protobuf.Struct
	86,  // 3: api.v1.GetStateRequest.properties:type_name -> google.protobuf.Struct
	87,  // 4: api.v1.GetStateRequest.lock_wait:type_name -> google.protobuf.Duration
	87,  // 5: api.v1.GetStateRequest.lock_ttl:type_name -> google.protobuf.Duration
	66,  // 6: api.v1.GetStateResponse.state:type_name -> api.v1.GetStateResponse.State
	86,  // 7: api.v1.SaveStateRequest.properties:type_name -> google.protobuf.Struct
	86,  // 8: api.v1.ReleaseStateLockRequest.properties:type_name -> google.protobuf.Struct
	87,  // 9: api.v1.AcquireLocksRequest.lock_wait:type_name -> google.protobuf.Duration
	87,  // 10: api.v1.AcquireLocksRequest.lock_ttl:type_name -> google.protobuf.Duration
	86,  // 11: api.v1.AcquireLocksRequest.properties:type_name -> google.protobuf.Struct
	67,  // 12: api.v1.AcquireLocksResponse.locks:type_name -> api.v1.AcquireLocksResponse.LocksEntry
	68,  // 13: api.v1.ReleaseLocksRequest.locks:type_name -> api.v1.ReleaseLocksRequest.LocksEntry
	86,  // 14: api.v1.ReleaseLocksRequest.properties:type_name -> google.protobuf.Struct
	69,  // 15: api.v1.AppDeployInfo.env:type_name -> api.v1.AppDeployInfo.EnvEntry
	86,  // 16: api.v1.AppDeployInfo.other:type_name -> google.protobuf.Struct
	86,  // 17: api.v1.AppNeed.properties:type_name -> google.protobuf.Struct
	70,  // 18: api.v1.App.env:type_name -> api.v1.App.EnvEntry
	24,  // 19: api.v1.App.deploy:type_name -> api.v1.AppDeployInfo
	71,  // 20: api.v1.App.needs:type_name -> api.v1.App.NeedsEntry
	86,  // 21: api.v1.App.properties:type_name -> google.protobuf.Struct
	2,   // 22: api.v1.DNSState.ssl_status:type_name -> api.v1.DNSState.SSLStatus
	86,  // 23: api.v1.DNSState.properties:type_name -> google.protobuf.Struct
	26,  // 24: api.v1.AppState.app:type_name -> api.v1.App
	28,  // 25: api.v1.AppState.deployment:type_name -> api.v1.DeploymentState
	27,  // 26: api.v1.AppState.dns:type_name -> api.v1.DNSState
	29,  // 27: api.v1.AppPlan.state:type_name -> api.v1.AppState
	30,  // 28: api.v1.AppPlan.build:type_name -> api.v1.AppBuild
	86,  // 29: api.v1.Dependency.properties:type_name -> google.protobuf.Struct
	32,  // 30: api.v1.DependencyState.dependency:type_name -> api.v1.Dependency
	27,  // 31: api.v1.DependencyState.dns:type_name -> api.v1.DNSState
	33,  // 32: api.v1.DependencyPlan.state:type_name -> api.v1.DependencyState
	72,  // 33: api.v1.PluginState.other:type_name -> api.v1.PluginState.OtherEntry
	31,  // 34: api.v1.PlanRequest.apps:type_name -> api.v1.AppPlan
	34,  // 35: api.v1.PlanRequest.dependencies:type_name -> api.v1.DependencyPlan
	47,  // 36: api.v1.PlanRequest.domains:type_name -> api.v1.DomainInfo
	35,  // 37: api.v1.PlanRequest.state:type_name -> api.v1.PluginState
	86,  // 38: api.v1.PlanRequest.args:type_name -> google.protobuf.Struct
	0,   // 39: api.v1.PlanAction.type:type_name -> api.v1.PlanType
	37,  // 40: api.v1.Plan.actions:type_name -> api.v1.PlanAction
	38,  // 41: api.v1.PlanResponse.deploy:type_name -> api.v1.Plan
	47,  // 42: api.v1.PlanResponse.domains:type_name -> api.v1.DomainInfo
	35,  // 43: api.v1.PlanResponse.state:type_name -> api.v1.PluginState
	73,  // 44: api.v1.PlanResponse.app_states:type_name -> api.v1.PlanResponse.AppStatesEntry
	74,  // 45: api.v1.PlanResponse.dependency_states:type_name -> api.v1.PlanResponse.DependencyStatesEntry
	48,  // 46: api.v1.PlanResponse.dns_records:type_name -> api.v1.DNSRecord
	31,  // 47: api.v1.ApplyRequest.apps:type_name -> api.v1.AppPlan
	34,  // 48: api.v1.ApplyRequest.dependencies:type_name -> api.v1.DependencyPlan
	47,  // 49: api.v1.ApplyRequest.domains:type_name -> api.v1.DomainInfo
	35,  // 50: api.v1.ApplyRequest.state:type_name -> api.v1.PluginState
	86,  // 51: api.v1.ApplyRequest.args:type_name -> google.protobuf.Struct
	0,   // 52: api.v1.ApplyAction.type:type_name -> api.v1.PlanType
	41,  // 53: api.v1.ApplyActionResponse.actions:type_name -> api.v1.ApplyAction
	35,  // 54: api.v1.ApplyDoneResponse.state:type_name -> api.v1.PluginState
	47,  // 55: api.v1.ApplyDoneResponse.domains:type_name -> api.v1.DomainInfo
	75,  // 56: api.v1.ApplyDoneResponse.app_states:type_name -> api.v1.ApplyDoneResponse.AppStatesEntry
	76,  // 57: api.v1.ApplyDoneResponse.dependency_states:type_name -> api.v1.ApplyDoneResponse.DependencyStatesEntry
	48,  // 58: api.v1.ApplyDoneResponse.dns_records:type_name -> api.v1.DNSRecord
	42,  // 59: api.v1.ApplyResponse.action:type_name -> api.v1.ApplyActionResponse
	43,  // 60: api.v1.ApplyResponse.done:type_name -> api.v1.ApplyDoneResponse
	26,  // 61: api.v1.LogsRequest.apps:type_name -> api.v1.App
	32,  // 62: api.v1.LogsRequest.dependencies:type_name -> api.v1.Dependency
	35,  // 63: api.v1.LogsRequest.state:type_name -> api.v1.PluginState
	88,  // 64: api.v1.LogsRequest.start:type_name -> google.protobuf.Timestamp
	88,  // 65: api.v1.LogsRequest.end:type_name -> google.protobuf.Timestamp
	1,   // 66: api.v1.LogsRequest.severity:type_name -> api.v1.LogSeverity
	3,   // 67: api.v1.LogsResponse.type:type_name -> api.v1.LogsResponse.Type
	88,  // 68: api.v1.LogsResponse.time:type_name -> google.protobuf.Timestamp
	1,   // 69: api.v1.LogsResponse.severity:type_name -> api.v1.LogSeverity
	77,  // 70: api.v1.LogsResponse.http:type_name -> api.v1.LogsResponse.Http
	86,  // 71: api.v1.LogsResponse.json:type_name -> google.protobuf.Struct
	86,  // 72: api.v1.DomainInfo.other:type_name -> google.protobuf.Struct
	4,   // 73: api.v1.DNSRecord.type:type_name -> api.v1.DNSRecord.Type
	35,  // 74: api.v1.ApplyDNSDoneResponse.state:type_name -> api.v1.PluginState
	47,  // 75: api.v1.ApplyDNSDoneResponse.domains:type_name -> api.v1.DomainInfo
	48,  // 76: api.v1.ApplyDNSDoneResponse.dns_records:type_name -> api.v1.DNSRecord
	48,  // 77: api.v1.PlanDNSRequest.dns_records:type_name -> api.v1.DNSRecord
	47,  // 78: api.v1.PlanDNSRequest.domains:type_name -> api.v1.DomainInfo
	35,  // 79: api.v1.PlanDNSRequest.state:type_name -> api.v1.PluginState
	86,  // 80: api.v1.PlanDNSRequest.args:type_name -> google.protobuf.Struct
	38,  // 81: api.v1.PlanDNSResponse.dns:type_name -> api.v1.Plan
	35,  // 82: api.v1.PlanDNSResponse.state:type_name -> api.v1.PluginState
	47,  // 83: api.v1.PlanDNSResponse.domains:type_name -> api.v1.DomainInfo
	48,  // 84: api.v1.PlanDNSResponse.dns_records:type_name -> api.v1.DNSRecord
	48,  // 85: api.v1.ApplyDNSRequest.dns_records:type_name -> api.v1.DNSRecord
	47,  // 86: api.v1.ApplyDNSRequest.domains:type_name -> api.v1.DomainInfo
	35,  // 87: api.v1.ApplyDNSRequest.state:type_name -> api.v1.PluginState
	86,  // 88: api.v1.ApplyDNSRequest.args:type_name -> google.protobuf.Struct
	42,  // 89: api.v1.ApplyDNSResponse.action:type_name -> api.v1.ApplyActionResponse
	49,  // 90: api.v1.ApplyDNSResponse.done:type_name -> api.v1.ApplyDNSDoneResponse
	26,  // 91: api.v1.AppRun.app:type_name -> api.v1.App
	78,  // 92: api.v1.AppRun.env:type_name -> api.v1.AppRun.EnvEntry
	86,  // 93: api.v1.AppRun.other:type_name -> google.protobuf.Struct
	32,  // 94: api.v1.DependencyRun.dependency:type_name -> api.v1.Dependency
	54,  // 95: api.v1.RunRequest.apps:type_name -> api.v1.AppRun
	55,  // 96: api.v1.RunRequest.dependencies:type_name -> api.v1.DependencyRun
	79,  // 97: api.v1.RunRequest.hosts:type_name -> api.v1.RunRequest.HostsEntry
	86,  // 98: api.v1.RunRequest.args:type_name -> google.protobuf.Struct
	80,  // 99: api.v1.RunVars.vars:type_name -> api.v1.RunVars.VarsEntry
	81,  // 100: api.v1.RunStartResponse.vars:type_name -> api.v1.RunStartResponse.VarsEntry
	5,   // 101: api.v1.RunOutputResponse.source:type_name -> api.v1.RunOutputResponse.Source
	6,   // 102: api.v1.RunOutputResponse.stream:type_name -> api.v1.RunOutputResponse.Stream
	58,  // 103: api.v1.RunResponse.start:type_name -> api.v1.RunStartResponse
	59,  // 104: api.v1.RunResponse.output:type_name -> api.v1.RunOutputResponse
	86,  // 105: api.v1.CommandArgs.flags:type_name -> google.protobuf.Struct
	61,  // 106: api.v1.CommandRequest.args:type_name -> api.v1.CommandArgs
	82,  // 107: api.v1.CommandRequest.app_states:type_name -> api.v1.CommandRequest.AppStatesEntry
	83,  // 108: api.v1.CommandRequest.dependency_states:type_name -> api.v1.CommandRequest.DependencyStatesEntry
	35,  // 109: api.v1.CommandRequest.plugin_state:type_name -> api.v1.PluginState
	7,   // 110: api.v1.DeployHookRequest.stage:type_name -> api.v1.DeployHookRequest.Stage
	31,  // 111: api.v1.DeployHookRequest.apps:type_name -> api.v1.AppPlan
	34,  // 112: api.v1.DeployHookRequest.dependencies:type_name -> api.v1.DependencyPlan
	47,  // 113: api.v1.DeployHookRequest.domains:type_name -> api.v1.DomainInfo
	35,  // 114: api.v1.DeployHookRequest.state:type_name -> api.v1.PluginState
	86,  // 115: api.v1.DeployHookRequest.args:type_name -> google.protobuf.Struct
	35,  // 116: api.v1.DeployHookResponse.state:type_name -> api.v1.PluginState
	47,  // 117: api.v1.DeployHookResponse.domains:type_name -> api.v1.DomainInfo
	84,  // 118: api.v1.DeployHookResponse.app_states:type_name -> api.v1.DeployHookResponse.AppStatesEntry
	85,  // 119: api.v1.DeployHookResponse.dependency_states:type_name -> api.v1.DeployHookResponse.DependencyStatesEntry
	48,  // 120: api.v1.DeployHookResponse.dns_records:type_name -> api.v1.DNSRecord
	25,  // 121: api.v1.App.NeedsEntry.value:type_name -> api.v1.AppNeed
	29,  // 122: api.v1.PlanResponse.AppStatesEntry.value:type_name -> api.v1.AppState
	33,  // 123: api.v1.PlanResponse.DependencyStatesEntry.value:type_name -> api.v1.DependencyState
	29,  // 124: api.v1.ApplyDoneResponse.AppStatesEntry.value:type_name -> api.v1.AppState
	33,  // 125: api.v1.ApplyDoneResponse.DependencyStatesEntry.value:type_name -> api.v1.DependencyState
	87,  // 126: api.v1.LogsResponse.Http.latency:type_name -> google.protobuf.Duration
	57,  // 127: api.v1.RunStartResponse.VarsEntry.value:type_name -> api.v1.RunVars
	29,  // 128: api.v1.CommandRequest.AppStatesEntry.value:type_name -> api.v1.AppState
	33,  // 129: api.v1.CommandRequest.DependencyStatesEntry.value:type_name -> api.v1.DependencyState
	29,  // 130: api.v1.DeployHookResponse.AppStatesEntry.value:type_name -> api.v1.AppState
	33,  // 131: api.v1.DeployHookResponse.DependencyStatesEntry.value:type_name -> api.v1.DependencyState
	8,   // 132: api.v1.BasicPluginService.Init:input_type -> api.v1.InitRequest
	10,  // 133: api.v1.BasicPluginService.Start:input_type -> api.v1.StartRequest
	12,  // 134: api.v1.BasicPluginService.ProjectInit:input_type -> api.v1.ProjectInitRequest
	14,  // 135: api.v1.StatePluginService.GetState:input_type -> api.v1.GetStateRequest
	16,  // 136: api.v1.StatePluginService.SaveState:input_type -> api.v1.SaveStateRequest
	18,  // 137: api.v1.StatePluginService.ReleaseStateLock:input_type -> api.v1.ReleaseStateLockRequest
	20,  // 138: api.v1.LockingPluginService.AcquireLocks:input_type -> api.v1.AcquireLocksRequest
	22,  // 139: api.v1.LockingPluginService.ReleaseLocks:input_type -> api.v1.ReleaseLocksRequest
	36,  // 140: api.v1.DeployPluginService.Plan:input_type -> api.v1.PlanRequest
	40,  // 141: api.v1.DeployPluginService.Apply:input_type -> api.v1.ApplyRequest
	45,  // 142: api.v1.LogsPluginService.Logs:input_type -> api.v1.LogsRequest
	50,  // 143: api.v1.DNSPluginService.PlanDNS:input_type -> api.v1.PlanDNSRequest
	52,  // 144: api.v1.DNSPluginService.ApplyDNS:input_type -> api.v1.ApplyDNSRequest
	56,  // 145: api.v1.RunPluginService.Run:input_type -> api.v1.RunRequest
	62,  // 146: api.v1.CommandPluginService.Command:input_type -> api.v1.CommandRequest
	64,  // 147: api.v1.DeployHookService.DeployHook:input_type -> api.v1.DeployHookRequest
	9,   // 148: api.v1.BasicPluginService.Init:output_type -> api.v1.InitResponse
	11,  // 149: api.v1.BasicPluginService.Start:output_type -> api.v1.StartResponse
	13,  // 150: api.v1.BasicPluginService.ProjectInit:output_type -> api.v1.ProjectInitResponse
	15,  // 151: api.v1.StatePluginService.GetState:output_type -> api.v1.GetStateResponse
	17,  // 152: api.v1.StatePluginService.SaveState:output_type -> api.v1.SaveStateResponse
	19,  // 153: api.v1.StatePluginService.ReleaseStateLock:output_type -> api.v1.ReleaseStateLockResponse
	21,  // 154: api.v1.LockingPluginService.AcquireLocks:output_type -> api.v1.AcquireLocksResponse
	23,  // 155: api.v1.LockingPluginService.ReleaseLocks:output_type -> api.v1.ReleaseLocksResponse
	39,  // 156: api.v1.DeployPluginService.Plan:output_type -> api.v1.PlanResponse
	44,  // 157: api.v1.DeployPluginService.Apply:output_type -> api.v1.ApplyResponse
	46,  // 158: api.v1.LogsPluginService.Logs:output_type -> api.v1.LogsResponse
	51,  // 159: api.v1.DNSPluginService.PlanDNS:output_type -> api.v1.PlanDNSResponse
	53,  // 160: api.v1.DNSPluginService.ApplyDNS:output_type -> api.v1.ApplyDNSResponse
	60,  // 161: api.v1.RunPluginService.Run:output_type -> api.v1.RunResponse
	63,  // 162: api.v1.CommandPluginService.Command:output_type -> api.v1.CommandResponse
	65,  // 163: api.v1.DeployHookService.DeployHook:output_type -> api.v1.DeployHookResponse
	148, // [148:164] is the sub-list for method output_type
	132, // [132:148] is the sub-list for method input_type
	132, // [132:132] is the sub-list for extension type_name
	132, // [132:132] is the sub-list for extension extendee
	0,   // [0:132] is the sub-list for field type_name
}

func init() { file_api_v1_plugin_proto_init() }
func file_api_v1_plugin_proto_init() {
	if File_api_v1_plugin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_plugin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectInitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseStateLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseStateLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireLocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireLocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseLocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseLocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppDeployInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppNeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppBuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependencyState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependencyPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyDoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyDNSDoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanDNSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanDNSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyDNSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyDNSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependencyRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunVars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunOutputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployHookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployHookResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateResponse_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_plugin_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsResponse_Http); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_plugin_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*GetStateResponse_Waiting)(nil),
		(*GetStateResponse_State_)(nil),
	}
	file_api_v1_plugin_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*ApplyResponse_Action)(nil),
		(*ApplyResponse_Done)(nil),
	}
	file_api_v1_plugin_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*LogsResponse_Text)(nil),
		(*LogsResponse_Json)(nil),
	}
	file_api_v1_plugin_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*ApplyDNSResponse_Action)(nil),
		(*ApplyDNSResponse_Done)(nil),
	}
	file_api_v1_plugin_proto_msgTypes[52].OneofWrappers = []interface{}{
		(*RunResponse_Start)(nil),
		(*RunResponse_Output)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_plugin_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   78,
			NumExtensions: 0,
			NumServices:   9,
		},
		GoTypes:           file_api_v1_plugin_proto_goTypes,
		DependencyIndexes: file_api_v1_plugin_proto_depIdxs,
		EnumInfos:         file_api_v1_plugin_proto_enumTypes,
		MessageInfos:      file_api_v1_plugin_proto_msgTypes,
	}.Build()
	File_api_v1_plugin_proto = out.File
	file_api_v1_plugin_proto_rawDesc = nil
	file_api_v1_plugin_proto_goTypes = nil
	file_api_v1_plugin_proto_depIdxs = nil
}
